@page "/upload"
@inject UniNotes.Services.UserService UserService
@inject UniNotes.Services.NoteService NoteService
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthStateProvider
@inject IJSRuntime JSRuntime

<PageTitle>UniNotes - Upload</PageTitle>
<link href="https://fonts.googleapis.com/css2?family=Lobster&display=swap" rel="stylesheet">
<link href="https://fonts.googleapis.com/css2?family=Roboto&display=swap" rel="stylesheet">
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.1/css/all.min.css">
<div id="particles-js"></div>
<script src="js/particles/particles.js"></script>
<script>
    particlesJS.load('particles-js', 'js/particles/particles.json', function () {});
</script>

<CascadingAuthenticationState>
    <AuthorizeView>
        <Authorized>
            <!-- User icon with dropdown menu -->
            <div class="user-icon-container">
                <div class="user-icon" @onclick="ToggleUserMenu">
                    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" width="36" height="36" fill="white">
                        <path d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 3c1.66 0 3 1.34 3 3s-1.34 3-3 3-3-1.34-3-3 1.34-3 3-3zm0 14.2c-2.5 0-4.71-1.28-6-3.22.03-1.99 4-3.08 6-3.08 1.99 0 5.97 1.09 6 3.08-1.29 1.94-3.5 3.22-6 3.22z" />
                    </svg>
                </div>
                @if (isUserMenuOpen)
                {
                    <div class="user-dropdown">
                        <div class="dropdown-item" style="pointer-events: none">
                            <i class="fa-solid fa-user"></i>
                            <span>@((user?.FirstName ?? "") + " " + (user?.LastName ?? ""))</span>
                        </div>
                        <div class="dropdown-divider"></div>
                        <div class="dropdown-item" @onclick='() => NavigationManager.NavigateTo("/panel")'>
                            <i class="fa-solid fa-note-sticky"></i>
                            <span>My Notes</span>
                        </div>
                        <div class="dropdown-item" @onclick='() => NavigationManager.NavigateTo("/dashboard")'>
                            <i class="fa-solid fa-gauge-high"></i>
                            <span>Dashboard</span>
                        </div>
                        <div class="dropdown-divider"></div>
                        <div class="dropdown-item" @onclick="Logout">
                            <i class="fa-solid fa-right-from-bracket"></i>
                            <span>Logout</span>
                        </div>
                    </div>
                }
            </div>

            <div class="full-page-background">
                <div class="upload-container">
                    <h1 class="logo">Upload Note</h1>
                    
                    @if (!string.IsNullOrEmpty(message))
                    {
                        <div class="alert @(isSuccess ? "alert-success" : "alert-danger")">
                            @message
                        </div>
                    }

                    <div class="upload-form">
                        <div class="form-group">
                            <label for="title">Title</label>
                            <input id="title" type="text" class="form-control" @bind="note.Title" />
                        </div>
                        
                        <div class="form-group">
                            <label for="description">Description</label>
                            <textarea id="description" class="form-control" @bind="note.Description"></textarea>
                        </div>
                        
                        <div class="form-group">
                            <label for="subject">Subject</label>
                            <input id="subject" type="text" class="form-control" @bind="note.Subject" />
                        </div>
                        
                        <div class="form-group">
                            <label for="semester">Semester</label>
                            <select id="semester" class="form-control" @bind="note.Semester">
                                @for (int i = 1; i <= 8; i++)
                                {
                                    <option value="@i">Semester @i</option>
                                }
                            </select>
                        </div>
                        
                        <div class="form-group">
                            <label>Upload File</label>
                            <InputFile OnChange="OnFileChange" class="form-control" accept=".pdf,.doc,.docx,.jpg,.png" />
                            @if (!string.IsNullOrEmpty(fileName))
                            {
                                <div class="selected-file mt-2">
                                    <i class="fa-solid fa-file"></i> @fileName
                                </div>
                            }
                        </div>
                        
                        <div class="form-group mt-4">
                            <button class="action-button w-100" @onclick="UploadNote" disabled="@(!isFileSelected)">
                                <i class="fa-solid fa-upload"></i> Upload Note
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </Authorized>
        <NotAuthorized>
            @{
                NavigationManager.NavigateTo("/");
            }
        </NotAuthorized>
    </AuthorizeView>
</CascadingAuthenticationState>

@code {
    private bool isUserMenuOpen = false;
    private User? user;
    private string? userId;
    private Note note = new Note();
    private IBrowserFile? selectedFile;
    private string fileName = "";
    private bool isFileSelected = false;
    private string message = "";
    private bool isSuccess = false;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        var userClaims = authState.User;

        if (userClaims.Identity?.IsAuthenticated == true)
        {
            userId = userClaims.FindFirst(ClaimTypes.NameIdentifier)?.Value;
            if (!string.IsNullOrEmpty(userId))
            {
                user = await UserService.GetUserByIdAsync(userId);
                if (user != null)
                {
                    note.Username = user.Username;
                }
            }
        }
    }

    private void ToggleUserMenu()
    {
        isUserMenuOpen = !isUserMenuOpen;
    }
    
    private async Task Logout()
    {
        if (AuthStateProvider is BlazorAuthStateProvider blazorAuthStateProvider)
        {
            await blazorAuthStateProvider.UpdateAuthenticationState(null);
            NavigationManager.NavigateTo("/");
        }
    }

    private void OnFileChange(InputFileChangeEventArgs e)
    {
        try
        {
            selectedFile = e.File;
            fileName = e.File.Name;
            isFileSelected = true;
        }
        catch (Exception ex)
        {
            message = $"Error selecting file: {ex.Message}";
            isSuccess = false;
        }
    }

    private async Task UploadNote()
    {
        if (selectedFile == null)
        {
            message = "Please select a file to upload.";
            isSuccess = false;
            return;
        }

        if (string.IsNullOrWhiteSpace(note.Title) || 
            string.IsNullOrWhiteSpace(note.Subject) || 
            note.Semester <= 0)
        {
            message = "Please fill all required fields.";
            isSuccess = false;
            return;
        }

        try
        {
            // Limit file size check before sending
            const long maxFileSize = 10 * 1024 * 1024; // 10 MB
            if (selectedFile.Size > maxFileSize)
            {
                message = "File size exceeds the maximum allowed (10 MB).";
                isSuccess = false;
                return;
            }

            bool result = await NoteService.UploadNoteAsync(note, selectedFile);
            
            if (result)
            {
                message = "Note uploaded successfully!";
                isSuccess = true;
                
                // Reset the form
                note = new Note { Username = user?.Username ?? "" };
                selectedFile = null;
                fileName = "";
                isFileSelected = false;
                
                // Redirect to panel after 2 seconds
                await Task.Delay(2000);
                NavigationManager.NavigateTo("/dashboard");
            }
            else
            {
                message = "Failed to upload the note. Please try again.";
                isSuccess = false;
            }
        }
        catch (Exception ex)
        {
            message = $"An error occurred: {ex.Message}";
            isSuccess = false;
        }
    }
}