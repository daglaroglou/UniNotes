@page "/upload"
@inject UniNotes.Services.UserService UserService
@inject UniNotes.Services.NoteService NoteService
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthStateProvider
@inject UniNotes.Services.SubjectService SubjectService
@inject IJSRuntime JSRuntime

<PageTitle>UniNotes - Upload</PageTitle>
<link href="https://fonts.googleapis.com/css2?family=Mynerve&display=swap" rel="stylesheet">
<link href="https://fonts.googleapis.com/css2?family=Roboto&display=swap" rel="stylesheet">
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.1/css/all.min.css">

<!-- Περιοχή για το animation σωματιδίων -->
<div id="particles-js"></div>
<script src="js/particles/particles.js"></script>
<script>
    particlesJS.load('particles-js', 'js/particles/particles.json', function () {});
</script>

<CascadingAuthenticationState>
    <AuthorizeView>
        <Authorized>
            <!-- Καρτέλες πλοήγησης -->
            <div class="navigation-tabs">
                <div class="nav-tab @(IsCurrentPage("/dashboard") ? "active" : "")" @onclick='() => NavigationManager.NavigateTo("/dashboard")'>
                    <i class="fa-solid fa-gauge-high"></i>
                    <span>Dashboard</span>
                </div>
                <div class="nav-tab @(IsCurrentPage("/notes") ? "active" : "")" @onclick='() => NavigationManager.NavigateTo("/notes")'>
                    <i class="fa-solid fa-note-sticky"></i>
                    <span>Φόρουμ Σημειώσεων</span>
                </div>
                <div class="nav-tab @(IsCurrentPage("/MyNotes") ? "active" : "")" @onclick='() => NavigationManager.NavigateTo("/MyNotes")'>
                    <i class="fa-solid fa-note-sticky"></i>
                    <span>Οι Σημειώσεις μου</span>
                </div>
                <div class="nav-tab @(IsCurrentPage("/upload") ? "active" : "")" @onclick='() => NavigationManager.NavigateTo("/upload")'>
                    <i class="fa-solid fa-file-arrow-up"></i>
                    <span>Ανέβασε Σημειώσεις</span>
                </div>
                <div class="nav-tab @(IsCurrentPage("/report") ? "active" : "")" @onclick='() => NavigationManager.NavigateTo("/report")'>
                    <i class="fa-solid fa-flag"></i>
                    <span>Αναφορά</span>
                </div>
                <div class="nav-tab @(IsCurrentPage("/settings") ? "active" : "")" @onclick='() => NavigationManager.NavigateTo("/settings")'>
                    <i class="fa-solid fa-gear"></i>
                    <span>Ρυθμίσεις</span>
                </div>
                @if (user?.IsAdmin == true)
                {
                    <div class="nav-tab @(IsCurrentPage("/admin") ? "active" : "")" @onclick='() => NavigationManager.NavigateTo("/admin")'>
                        <i style="color: cornflowerblue;" class="fa-solid fa-user-tie"></i>
                        <span style="color: cornflowerblue;">Admin Panel</span>
                    </div>
                }
                @if (user?.IsSecretary == true)
                {
                    <div class="nav-tab @(IsCurrentPage("/secretary") ? "active" : "")" @onclick='() => NavigationManager.NavigateTo("/secretary")'>
                        <i style="color: yellow" class="fa-solid fa-envelope"></i>
                        <span style="color: yellow">Γραμματεία</span>
                    </div>
                }
                <div class="user-profile">
                    <button class="user-name-button" @onclick='() => NavigationManager.NavigateTo($"/profile/{user?.Username}")'>
                        @((user?.FirstName ?? "") + " " + (user?.LastName ?? ""))
                    </button>
                    <div class="user-icon" @onclick="HandleLogout">
                        <i class="fa-solid fa-right-from-bracket"></i>
                    </div>
                </div>
            </div>

            <div class="full-page-background">
                <!-- Φόρμα μεταφόρτωσης σημειώσεων -->
                <div class="upload-container">
                    <h1 class="logo">Ανάρτηση Σημείωσης</h1>

                    <!-- Εμφάνιση μηνυμάτων επιτυχίας ή σφάλματος -->
                    @if (!string.IsNullOrEmpty(successMessage))
                    {
                        <div class="message-container">
                            <div class="success-message">@((MarkupString)successMessage)</div>
                        </div>
                    }
                    @if (!string.IsNullOrEmpty(errorMessage))
                    {
                        <div class="message-container">
                            <div class="error-message">@((MarkupString)errorMessage)</div>
                        </div>
                    }

                    <!-- Πεδίο τίτλου σημείωσης -->
                    <div class="form-group">
                        <label for="title">Τίτλος</label>
                        <div class="title-container">
                            <input id="title" type="text" class="form-control"
                                   @bind="note.Title"
                                   placeholder=""
                                   @onclick="FocusElement" />
                            <div class="hover-text">Δώσε έναν τίτλο στις σημειώσεις σου...</div>
                        </div>
                    </div>

                    <!-- Πεδίο περιγραφής -->
                    <div class="form-group">
                        <label for="description">Περιγραφή</label>
                        <div class="description-container">
                            <textarea id="description" class="form-control"
                                      @bind="note.Description"
                                      placeholder=""
                                      @onclick="FocusElement"></textarea>
                            <div class="hover-text">Δώσε μια περιγραφή για τις σημειώσεις σου...</div>
                        </div>
                    </div>

                    <!-- Επιλογή εξαμήνου -->
                    <div class="form-group">
                        <label for="semester">Εξάμηνο</label>
                        <select id="semester" class="form-control" value="@note.Semester" @onchange="OnSemesterChanged">
                            <option value="0" disabled selected>Επιλογή εξαμήνου</option>
                            @for (int i = 1; i <= 8; i++)
                            {
                                <option value="@i">@i.ToString()ο Εξάμηνο</option>
                            }
                        </select>
                    </div>

                    <!-- Επιλογή μαθήματος (εξαρτάται από το επιλεγμένο εξάμηνο) -->
                    <div class="form-group">
                        <label for="subject">Μάθημα</label>
                        <select id="subject" class="form-control" @bind="note.Subject">
                            @if (note.Semester == 0)
                            {
                                <option value="" disabled selected>Επιλογή μαθήματος</option>
                            }
                            else
                            {
                                <option value="" disabled selected>Επιλογή μαθήματος</option>
                                @foreach (var subject in semesterSubjects)
                                {
                                    <option value="@subject">@subject</option>
                                }
                            }
                        </select>
                    </div>

                    <!-- Περιοχή επιλογής ετικετών (tags) -->
                    <div class="form-group">
                        <div class="tags-container">
                            <!-- Εμφάνιση επιλεγμένων ετικετών -->
                            <div class="tags-list">
                                @foreach (var tag in tags)
                                {
                                    <div class="tag-item">
                                        <span>@tag</span>
                                        <button type="button" class="tag-remove-btn" @onclick="() => RemoveTag(tag)">
                                            <i class="fa-solid fa-times"></i>
                                        </button>
                                    </div>
                                }
                            </div>
                            <!-- Επιλογή από προτεινόμενες ετικέτες -->
                            <div class="tag-selection">
                                <p class="tag-instruction">Επιλέξτε tags για τις σημειώσεις σας:</p>
                                <div class="tag-options">
                                    @foreach (var suggestion in tagSuggestions)
                                    {
                                        <button type="button"
                                                class="tag-suggestion-btn @(tags.Contains(suggestion) ? "selected" : "")"
                                                @onclick="() => ToggleTag(suggestion)">
                                            @suggestion
                                        </button>
                                    }
                                </div>
                            </div>
                        </div>

                        <!-- Επιλογή αρχείου για μεταφόρτωση -->
                        <label>Ανάρτηση Αρχείου</label>
                        <InputFile OnChange="OnFileChange" class="form-control" accept=".pdf,.doc,.docx,.jpg,.png" />
                        @if (!string.IsNullOrEmpty(fileName))
                        {
                            <div class="selected-file mt-2">
                                <i class="fa-solid fa-file"></i> @fileName
                            </div>
                        }
                    </div>
                    <!-- Κουμπί μεταφόρτωσης -->
                    <div class="form-group mt-4">
                        <button class="action-button w-100" @onclick="() => ValidateAndUpload()">
                            <i class="fa-solid fa-upload"></i> ΑΝΑΡΤΗΣΗ ΣΗΜΕΙΩΣΗΣ
                        </button>
                    </div>
                </div>
            </div>
        </Authorized>
        <NotAuthorized>
        </NotAuthorized>
    </AuthorizeView>
</CascadingAuthenticationState>

@code {
    // Βασικές μεταβλητές για τη σελίδα μεταφόρτωσης
    private User? user;                    
    private string? userId;                
    private Note note = new Note();        
    private IBrowserFile? selectedFile;    
    private string fileName = "";          
    private bool isFileSelected = false;   
    private string errorMessage = "";      
    private string successMessage = "";    
    private bool isRedirecting = false;    

    // Διαχείριση ετικετών (tags)
    private List<string> tags = new List<string>();              
    private List<string> semesterSubjects = new List<string>();  

    // Προκαθορισμένες προτάσεις ετικετών
    private readonly List<string> tagSuggestions = new List<string> {
        "Εξετάσεις", "Ασκήσεις", "Διάλεξη"
    };

    // Αρχικοποίηση και φόρτωση δεδομένων χρήστη
    protected override async Task OnInitializedAsync()
    {
        // Ανάκτηση της κατάστασης αυθεντικοποίησης
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        var userClaims = authState.User;

        // Έλεγχος αν ο χρήστης είναι συνδεδεμένος
        if (userClaims.Identity?.IsAuthenticated == true)
        {
            // Ανάκτηση του αναγνωριστικού χρήστη
            userId = userClaims.FindFirst(ClaimTypes.NameIdentifier)?.Value;
            if (!string.IsNullOrEmpty(userId))
            {
                // Φόρτωση πλήρους προφίλ χρήστη
                user = await UserService.GetUserByIdAsync(userId);
                if (user != null)
                {
                    // Αρχικοποίηση του πεδίου username στο αντικείμενο σημείωσης
                    note.Username = user.Username;
                }
            }
        }
    }

    // Χειρισμός αλλαγής εξαμήνου και φόρτωση των αντίστοιχων μαθημάτων
    private async Task OnSemesterChanged(ChangeEventArgs e)
    {
        // Μετατροπή της επιλεγμένης τιμής σε αριθμό εξαμήνου
        if (int.TryParse(e.Value?.ToString(), out int semesterId))
        {
            // Ενημέρωση του εξαμήνου στο αντικείμενο σημείωσης
            note.Semester = semesterId;
            // Φόρτωση των μαθημάτων για το επιλεγμένο εξάμηνο
            semesterSubjects = await SubjectService.GetSubjectsForSemesterAsync(semesterId);

            // Εξαναγκασμός ανανέωσης του UI
            StateHasChanged();
        }
        else
        {
            // Αν η τιμή δεν είναι έγκυρη, επαναφορά του εξαμήνου και καθαρισμός της λίστας μαθημάτων
            note.Semester = 0;
            semesterSubjects.Clear();
        }
    }

    // Εναλλαγή κατάστασης ετικέτας (προσθήκη/αφαίρεση)
    private void ToggleTag(string tag)
    {
        // Αν η ετικέτα υπάρχει ήδη στη λίστα, την αφαιρούμε
        if (tags.Contains(tag))
        {
            tags.Remove(tag);
        }
        // Διαφορετικά, την προσθέτουμε
        else
        {
            tags.Add(tag);
        }
        // Ενημέρωση του UI
        StateHasChanged();
    }

    // Αφαίρεση συγκεκριμένης ετικέτας από τη λίστα
    private void RemoveTag(string tag)
    {
        tags.Remove(tag);
        StateHasChanged();
    }

    // Επικύρωση δεδομένων και μεταφόρτωση της σημείωσης
    private async Task ValidateAndUpload()
    {
        // Αποτροπή διπλών προσπαθειών μεταφόρτωσης
        if (isRedirecting) return;

        // Καθαρισμός προηγούμενων μηνυμάτων
        errorMessage = string.Empty;
        successMessage = string.Empty;

        // Συλλογή σφαλμάτων επικύρωσης
        var errors = new List<string>();

        // Έλεγχος αν έχει επιλεχθεί αρχείο
        if (selectedFile == null)
        {
            errors.Add("Please select a file to upload.");
        }
        else
        {
            // Έλεγχος μεγέθους αρχείου πριν την αποστολή
            const long maxFileSize = 10 * 1024 * 1024; // 10 MB
            if (selectedFile.Size > maxFileSize)
            {
                errors.Add("File size exceeds the maximum allowed (10 MB).");
            }
        }

        // Έλεγχος τίτλου
        if (string.IsNullOrWhiteSpace(note.Title))
        {
            errors.Add("Title is required.");
        }

        // Έλεγχος εξαμήνου
        if (note.Semester <= 0)
        {
            errors.Add("Please select a semester.");
        }

        // Έλεγχος μαθήματος
        if (string.IsNullOrWhiteSpace(note.Subject))
        {
            errors.Add("Please select a subject.");
        }

        // Έλεγχος ετικετών
        if (tags == null || tags.Count == 0)
        {
            errors.Add("Επιλέξτε τουλάχιστον ένα tag για τις σημειώσεις σας.");
        }

        // Αν υπάρχουν σφάλματα επικύρωσης, εμφάνισή τους και τερματισμός
        if (errors.Count > 0)
        {
            errorMessage = string.Join("<br>", errors);
            return;
        }

        // Προσθήκη ετικετών στο αντικείμενο σημείωσης πριν τη μεταφόρτωση
        note.Tags = tags;

        // Αν η επικύρωση είναι επιτυχής, συνέχεια με τη μεταφόρτωση
        await UploadNote();
    }

    // Αποσύνδεση χρήστη
    private async Task Logout()
    {
        if (AuthStateProvider is BlazorAuthStateProvider blazorAuthStateProvider)
        {
            await blazorAuthStateProvider.UpdateAuthenticationState(null);
            NavigationManager.NavigateTo("/");
        }
    }

    // Χειρισμός αλλαγής επιλεγμένου αρχείου
    private async Task OnFileChange(InputFileChangeEventArgs e)
    {
        try
        {
            // Καθαρισμός προηγούμενων μηνυμάτων
            errorMessage = string.Empty;
            successMessage = string.Empty;

            // Έλεγχος αν το αρχείο είναι κενό
            if (e.File == null)
            {
                errorMessage = "Invalid file selection.";
                return;
            }

            // Έλεγχος μεγέθους αρχείου για αποφυγή κατάρρευσης της εφαρμογής
            const long maxFileSize = 10 * 1024 * 1024; // 10 MB
            if (e.File.Size > maxFileSize)
            {
                errorMessage = "File size exceeds the maximum allowed (10 MB).";
                return;
            }

            // Έλεγχος τύπου αρχείου για διασφάλιση συμβατότητας
            string extension = "";
            try
            {
                extension = Path.GetExtension(e.File.Name).ToLowerInvariant();
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error getting file extension: {ex.Message}");
                errorMessage = "Invalid filename.";
                return;
            }

            // Έλεγχος για υποστηριζόμενους τύπους αρχείων
            if (!new[] { ".pdf", ".doc", ".docx", ".jpg", ".png" }.Contains(extension))
            {
                errorMessage = "File type not supported. Please upload PDF, Word, JPG or PNG files.";
                return;
            }

            // Αποθήκευση του αρχείου στις μεταβλητές
            selectedFile = e.File;
            fileName = e.File.Name;
            isFileSelected = true;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"File selection error: {ex}");
            errorMessage = $"Error selecting file: {ex.Message}";

            // Επαναφορά κατάστασης επιλογής αρχείου
            selectedFile = null;
            fileName = string.Empty;
            isFileSelected = false;
        }
    }

    // Μεταφόρτωση της σημείωσης στο διακομιστή
    private async Task UploadNote()
    {
        try
        {
            // Κλήση της υπηρεσίας για μεταφόρτωση της σημείωσης
            bool result = await NoteService.UploadNoteAsync(note, selectedFile);

            if (result)
            {
                // Εμφάνιση μηνύματος επιτυχίας
                successMessage = "Note uploaded successfully! Redirecting to dashboard...";

                // Επαναφορά της φόρμας
                note = new Note { Username = user?.Username ?? "" };
                selectedFile = null;
                fileName = "";
                isFileSelected = false;

                // Αποτροπή διπλών ανακατευθύνσεων
                isRedirecting = true;

                // Ανακατεύθυνση στο dashboard μετά από 2 δευτερόλεπτα
                StateHasChanged();
                await Task.Delay(2000);
                NavigationManager.NavigateTo("/dashboard");
            }
            else
            {
                errorMessage = "Failed to upload the note. Please try again.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"An error occurred: {ex.Message}";
        }
    }

    // Αναγκασμός εστίασης σε στοιχείο της φόρμας με JavaScript
    private async Task FocusElement(MouseEventArgs args)
    {
        // Χρήση JavaScript για λήψη του τρέχοντος εστιασμένου στοιχείου
        var elementId = await JSRuntime.InvokeAsync<string>("eval", "document.activeElement.id");

        if (!string.IsNullOrEmpty(elementId))
        {
            // Εξαναγκασμός εστίασης στο στοιχείο
            await JSRuntime.InvokeVoidAsync("document.getElementById", elementId, "focus");
        }
    }

    // Έλεγχος αν βρισκόμαστε στην τρέχουσα σελίδα
    private bool IsCurrentPage(string path)
    {
        return NavigationManager.Uri.EndsWith(path, StringComparison.OrdinalIgnoreCase);
    }

    // Χειρισμός αποσύνδεσης χρήστη
    private void HandleLogout(MouseEventArgs args)
    {
        throw new NotImplementedException();
    }
}