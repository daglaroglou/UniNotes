@page "/login"
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
@inject UserService UserService

@attribute [StreamRendering]

<PageTitle>UniNotes - Login</PageTitle>

<link href="https://fonts.googleapis.com/css2?family=Lobster&display=swap" rel="stylesheet">

<div id="particles-js"></div>

<script src="js/particles/particles.js"></script>

<script>
    particlesJS.load('particles-js', 'js/particles/particles.json', function () {});
</script>

<div class="full-page-background">
    <center>
        <h1 class="logo">Login</h1>
    </center>

    <div class="login-form">
        <div class="input-container">
            <input type="email" placeholder="Email" class="action-input" @bind="email" />
        </div>
        <div class="input-container">
            <input type="password" placeholder="Password" class="action-input" @bind="password" />
        </div>
        <div class="button-container">
            <button class="action-button" @onclick="() => HandleLogin()">Login</button>
        </div>
        <br>
    </div>
    @if (!string.IsNullOrEmpty(successMessage))
    {
        <div class="success-message">@((MarkupString)successMessage)</div>
    }
    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="error-message">@((MarkupString)errorMessage)</div>
    }
</div>

@code {
    private string email = string.Empty;
    private string password = string.Empty;
    private string errorMessage = string.Empty;
    private string successMessage = string.Empty;

    private async Task HandleLogin()
    {
        // Clear previous errors
        errorMessage = string.Empty;

        if (!string.IsNullOrEmpty(email) && !string.IsNullOrEmpty(password) && Funcs.Misc.IsValidEmail(email) && password.Length >= 8)
        {
            // Authenticate me to MongoDB database
            bool isAuthenticated = await UserService.AuthenticateAsync(email, password);

            if (isAuthenticated)
            {
                successMessage = "Login successfull! Redirecting to dashboard...";
                StateHasChanged();
                await Task.Delay(2000);
                Navigation.NavigateTo("/dashboard");
            }
            else
            {
                errorMessage = "Invalid email or password";
            }
        }
        else
        {
            if (string.IsNullOrEmpty(email) && string.IsNullOrEmpty(password))
            {
                errorMessage = "Please enter both email and password";
            }
            else
            {
                var errors = new List<string>();

                if (string.IsNullOrEmpty(email))
                {
                    errors.Add("Email is required");
                }
                else if (!Funcs.Misc.IsValidEmail(email))
                {
                    errors.Add("Please enter a valid DAI UoM email address");
                }

                if (string.IsNullOrEmpty(password))
                {
                    errors.Add("Password is required");
                }
                else if (password.Length < 8)
                {
                    errors.Add("Password must be at least 8 characters");
                }

                errorMessage = string.Join("<br>", errors);
            }
        }
    }
}
