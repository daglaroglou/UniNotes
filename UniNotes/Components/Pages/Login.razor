@page "/login"
@inject UniNotes.Services.UserService UserService
@inject NavigationManager NavigationManager
@inject NavigationManager Navigation
@inject AuthenticationStateProvider AuthStateProvider
@inject IJSRuntime JSRuntime
@inject ICaptchaService CaptchaService
@implements IDisposable

<PageTitle>UniNotes - Login</PageTitle>
<link href="https://fonts.googleapis.com/css2?family=Lobster&display=swap" rel="stylesheet">
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.1/css/all.min.css">

<div id="particles-js"></div>
<script src="js/particles/particles.js"></script>

<!-- Back button -->
<div class="back-button-container">
    <button class="action-button" @onclick="GoBack">
        <i class="fa-solid fa-arrow-left"></i> ΠΙΣΩ
    </button>
</div>

<script>
    particlesJS.load('particles-js', 'js/particles/particles.json', function () {});
</script>

@if (isCheckingAuth)
{
    <div class="full-page-background">
        <center><h1 class="logo">Loading...</h1></center>
    </div>
}
else
{
    <div class="full-page-background">
        <center>
            <h1 class="logo">Login</h1>
        </center>
        <div class="login-form">
            <div class="input-container">
                <input type="email" placeholder="Email" class="action-input" @bind="email" />
            </div>
            <div class="input-container">
                <input type="password" placeholder="Κωδικός Πρόσβασης" class="action-input" @bind="password" />
            </div>
            <div class="captcha-container">
                <!-- C# CAPTCHA implementation -->
                <div class="captcha-image">
                    <img src="@captchaImageUrl" alt="CAPTCHA" />
                    <button class="refresh-captcha" @onclick="RefreshCaptchaAsync" title="Refresh CAPTCHA">
                        <i class="fa-solid fa-arrows-rotate"></i>
                    </button>
                </div>
                <div class="captcha-input">
                    <input type="text" placeholder="Enter the code above" class="action-input" @bind="captchaInput" />
                </div>
            </div>
            <div class="button-container">
                <button class="action-button" @onclick="HandleLogin">
                    <i class="fa-solid fa-right-to-bracket"></i> Login
                </button>
            </div>
            <br>
        </div>
        @if (!string.IsNullOrEmpty(successMessage))
        {
            <div class="success-message">@((MarkupString)successMessage)</div>
        }
        @if (!string.IsNullOrEmpty(errorMessage))
        {
            <div class="error-message">@((MarkupString)errorMessage)</div>
        }
    </div>
}

@code {
    private string email = string.Empty;
    private string password = string.Empty;
    private string errorMessage = string.Empty;
    private string successMessage = string.Empty;
    private bool isRedirecting = false;
    private bool isCheckingAuth = true;
    private string captchaImageUrl = string.Empty;
    private string captchaInput = string.Empty;
    private string captchaId = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();

        if (authState.User.Identity?.IsAuthenticated == true)
        {
            var userId = authState.User.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value;
            if (!string.IsNullOrEmpty(userId))
            {
                var user = await UserService.GetUserByIdAsync(userId);
                if (user != null)
                {
                    Navigation.NavigateTo("/dashboard", forceLoad: false);
                    return; // Don't let anything else run
                }
                else
                {
                    var authStateProvider = (BlazorAuthStateProvider)AuthStateProvider;
                    await authStateProvider.UpdateAuthenticationState(null);
                }
            }
        }

        isCheckingAuth = false; // Done checking, now show login UI
        
        // Generate a new CAPTCHA
        await GenerateCaptchaAsync();
    }
    
    private async Task GenerateCaptchaAsync()
    {
        var captchaResult = await CaptchaService.GenerateCaptchaAsync();
        captchaId = captchaResult.CaptchaId;
        captchaImageUrl = captchaResult.ImageUrl;
        captchaInput = string.Empty; // Clear previous input
    }

    private async Task RefreshCaptchaAsync()
    {
        await GenerateCaptchaAsync();
    }

    private async Task HandleLogin()
    {
        // Prevent duplicate login attempts
        if (isRedirecting) return;

        // Clear previous errors
        errorMessage = string.Empty;

        // Check if captcha input is provided
        if (string.IsNullOrEmpty(captchaInput))
        {
            errorMessage = "Please enter the CAPTCHA code";
            return;
        }

        if (!string.IsNullOrEmpty(email) && !string.IsNullOrEmpty(password) && Funcs.Misc.IsValidEmail(email) && password.Length >= 8)
        {
            try
            {
                // Validate the captcha
                bool captchaValid = await CaptchaService.ValidateCaptchaAsync(captchaId, captchaInput);

                if (!captchaValid)
                {
                    errorMessage = "CAPTCHA validation failed. Please try again.";
                    await GenerateCaptchaAsync(); // Generate new captcha
                    return;
                }

                // Authenticate user
                var user = await UserService.ValidateUserAsync(email, password);
                if (user != null)
                {
                    // Update authentication state
                    var authStateProvider = (BlazorAuthStateProvider)AuthStateProvider;
                    await authStateProvider.UpdateAuthenticationState(user);
                    successMessage = "Login successful! Redirecting to dashboard...";
                    StateHasChanged();

                    // Prevent duplicate redirections
                    isRedirecting = true;

                    // Add a slight delay to ensure authentication state is updated
                    await Task.Delay(2000);
                    Navigation.NavigateTo("/dashboard", forceLoad: false);
                }
                else
                {
                    errorMessage = "Invalid email or password";
                    await GenerateCaptchaAsync(); // Generate new captcha
                }
            }
            catch (Exception ex)
            {
                errorMessage = $"An error occurred: {ex.Message}";
                await GenerateCaptchaAsync(); // Generate new captcha
            }
        }
        else
        {
            if (string.IsNullOrEmpty(email) && string.IsNullOrEmpty(password))
            {
                errorMessage = "Please enter both email and password";
            }
            else
            {
                var errors = new List<string>();
                if (string.IsNullOrEmpty(email))
                {
                    errors.Add("Email is required");
                }
                else if (!Funcs.Misc.IsValidEmail(email))
                {
                    errors.Add("Please enter a valid DAI UoM email address");
                }
                if (string.IsNullOrEmpty(password))
                {
                    errors.Add("Password is required");
                }
                else if (!Funcs.Misc.IsValidPassword(password))
                {
                    errors.Add("Password must be at least 8 characters and should include at least 1 uppercase letter, 1 lowercase letter and 1 number");
                }
                errorMessage = string.Join("<br>", errors);
            }
            await GenerateCaptchaAsync(); // Generate new captcha
        }
    }

    private void GoBack()
    {
        NavigationManager.NavigateTo("/", forceLoad: false);
    }

    public void Dispose()
    {
        // Clean up any resources
    }
}
