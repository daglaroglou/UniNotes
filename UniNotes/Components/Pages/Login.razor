@page "/login"
@using Microsoft.AspNetCore.Components.Authorization
@inject UniNotes.Services.UserService UserService
@inject NavigationManager Navigation
@inject AuthenticationStateProvider AuthStateProvider
@inject IJSRuntime JSRuntime
@implements IDisposable

<PageTitle>UniNotes - Login</PageTitle>
<link href="https://fonts.googleapis.com/css2?family=Lobster&display=swap" rel="stylesheet">

<script>
    // Store the Blazor instance when component is initialized
    window.initializeBlazorInstance = (instance) => {
        window.blazorInstance = instance;
        console.log("Blazor instance initialized");
    };
</script>

<div id="particles-js"></div>
<script src="js/particles/particles.js"></script>
<script src="https://js.hcaptcha.com/1/api.js?render=explicit" async defer></script>
<script>
    particlesJS.load('particles-js', 'js/particles/particles.json', function () {});

    // Global hCaptcha handler functions
    window.hCaptchaFunctions = {
        renderCaptcha: function() {
            // Check if hcaptcha is loaded and remove any existing widgets first
            if (typeof hcaptcha !== 'undefined') {
                // Get all existing widget IDs and reset them
                try {
                    hcaptcha.reset();
                } catch (e) {
                    console.log("No widgets to reset");
                }
                
                // Store reference to dotnet instance
                const dotnetRef = window.blazorInstance;
                
                // Render a new widget
                hcaptcha.render('h-captcha', {
                    sitekey: '4dce49f0-164e-45e6-ad6e-4740ccdcef90',
                    callback: function(token) {
                        // Call the instance method directly if available
                        if (dotnetRef) {
                            dotnetRef.invokeMethodAsync('OnCaptchaCompleted', token);
                        } else {
                            // Fallback to static method
                            DotNet.invokeMethodAsync('UniNotes', 'SetCaptchaToken', token);
                        }
                        console.log('Captcha completed with token: ' + token.substring(0, 10) + '...');
                    },
                    'expired-callback': function() {
                        if (dotnetRef) {
                            dotnetRef.invokeMethodAsync('OnCaptchaExpired');
                        } else {
                            DotNet.invokeMethodAsync('UniNotes', 'SetCaptchaToken', '');
                        }
                        console.log('Captcha expired');
                    }
                });
            } else {
                // If hCaptcha isn't loaded yet, try again in a moment
                setTimeout(window.hCaptchaFunctions.renderCaptcha, 500);
            }
        },
        
        isCaptchaLoaded: function() {
            return typeof hcaptcha !== 'undefined';
        }
    };
</script>

@if (isCheckingAuth)
{
    <div class="full-page-background">
        <center><h1 class="logo">Loading...</h1></center>
    </div>
}
else
{
    <div class="full-page-background">
        <center>
            <h1 class="logo">Login</h1>
        </center>
        <div class="login-form">
            <div class="input-container">
                <input type="email" placeholder="Email" class="action-input" @bind="email" />
            </div>
            <div class="input-container">
                <input type="password" placeholder="Password" class="action-input" @bind="password" />
            </div>
            <div class="captcha-container">
                <div id="h-captcha"></div>
            </div>
            <div class="button-container">
                <button class="action-button" @onclick="HandleLogin">Login</button>
            </div>
            <br>
        </div>
        @if (!string.IsNullOrEmpty(successMessage))
        {
            <div class="success-message">@((MarkupString)successMessage)</div>
        }
        @if (!string.IsNullOrEmpty(errorMessage))
        {
            <div class="error-message">@((MarkupString)errorMessage)</div>
        }
    </div>
}

@code {
    private string email = string.Empty;
    private string password = string.Empty;
    private string errorMessage = string.Empty;
    private string successMessage = string.Empty;
    private bool isRedirecting = false;
    private bool isCheckingAuth = true;
    private string captchaToken = string.Empty; // Changed from static to instance field
    private DotNetObjectReference<Login>? objRef;
    private bool captchaInitialized = false;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();

        if (authState.User.Identity?.IsAuthenticated == true)
        {
            var userId = authState.User.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value;
            if (!string.IsNullOrEmpty(userId))
            {
                var user = await UserService.GetUserByIdAsync(userId);
                if (user != null)
                {
                    Navigation.NavigateTo("/dashboard", forceLoad: false);
                    return; // Don't let anything else run
                }
                else
                {
                    var authStateProvider = (BlazorAuthStateProvider)AuthStateProvider;
                    await authStateProvider.UpdateAuthenticationState(null);
                }
            }
        }

        isCheckingAuth = false; // Done checking, now show login UI
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && !isCheckingAuth)
        {
            // Create a reference to this component instance
            objRef = DotNetObjectReference.Create(this);
            
            // Pass the instance to JavaScript
            await JSRuntime.InvokeVoidAsync("initializeBlazorInstance", objRef);
            
            await JSRuntime.InvokeVoidAsync("hCaptchaFunctions.renderCaptcha");
            captchaInitialized = true;
        }
        else if (!firstRender && !isCheckingAuth && !captchaInitialized)
        {
            // Check if hCaptcha is loaded
            bool isLoaded = await JSRuntime.InvokeAsync<bool>("hCaptchaFunctions.isCaptchaLoaded");
            if (isLoaded && !captchaInitialized)
            {
                await JSRuntime.InvokeVoidAsync("hCaptchaFunctions.renderCaptcha");
                captchaInitialized = true;
            }
        }
    }

    public void Dispose()
    {
        objRef?.Dispose();
    }

    [JSInvokable]
    public void OnCaptchaCompleted(string token)
    {
        // Instance method called from JS
        captchaToken = token;
        Console.WriteLine($"Captcha token received: {token.Substring(0, Math.Min(10, token.Length))}...");
        StateHasChanged();
    }

    [JSInvokable]
    public void OnCaptchaExpired()
    {
        captchaToken = string.Empty;
        Console.WriteLine("Captcha expired");
        StateHasChanged();
    }

    private async Task ResetCaptcha()
    {
        captchaToken = string.Empty;
        await JSRuntime.InvokeVoidAsync("hCaptchaFunctions.renderCaptcha");
    }

    private async Task HandleLogin()
    {
        // Prevent duplicate login attempts
        if (isRedirecting) return;

        // Clear previous errors
        errorMessage = string.Empty;

        // Check if captcha token is set
        if (string.IsNullOrEmpty(captchaToken))
        {
            errorMessage = "Please complete the captcha verification";
            return;
        }

        if (!string.IsNullOrEmpty(email) && !string.IsNullOrEmpty(password) && Funcs.Misc.IsValidEmail(email) && password.Length >= 8)
        {
            try
            {
                // Validate the captcha token
                bool captchaValid = await ValidateCaptchaAsync(captchaToken);

                if (!captchaValid)
                {
                    errorMessage = "Captcha validation failed. Please try again.";
                    await ResetCaptcha();
                    return;
                }

                // Authenticate user
                var user = await UserService.ValidateUserAsync(email, password);
                if (user != null)
                {
                    // Update authentication state
                    var authStateProvider = (BlazorAuthStateProvider)AuthStateProvider;
                    await authStateProvider.UpdateAuthenticationState(user);
                    successMessage = "Login successful! Redirecting to dashboard...";
                    StateHasChanged();

                    // Prevent duplicate redirections
                    isRedirecting = true;

                    // Add a slight delay to ensure authentication state is updated
                    await Task.Delay(2000);
                    Navigation.NavigateTo("/dashboard", forceLoad: false);
                }
                else
                {
                    errorMessage = "Invalid email or password";
                    await ResetCaptcha();
                }
            }
            catch (Exception ex)
            {
                errorMessage = $"An error occurred: {ex.Message}";
                await ResetCaptcha();
            }
        }
        else
        {
            if (string.IsNullOrEmpty(email) && string.IsNullOrEmpty(password))
            {
                errorMessage = "Please enter both email and password";
            }
            else
            {
                var errors = new List<string>();
                if (string.IsNullOrEmpty(email))
                {
                    errors.Add("Email is required");
                }
                else if (!Funcs.Misc.IsValidEmail(email))
                {
                    errors.Add("Please enter a valid DAI UoM email address");
                }
                if (string.IsNullOrEmpty(password))
                {
                    errors.Add("Password is required");
                }
                else if (!Funcs.Misc.IsValidPassword(password))
                {
                    errors.Add("Password must be at least 8 characters and should include at least 1 uppercase letter, 1 lowercase letter and 1 number");
                }
                errorMessage = string.Join("<br>", errors);
            }
            await ResetCaptcha();
        }
    }

    private async Task<bool> ValidateCaptchaAsync(string token)
    {
        // In a real application, you would make an HTTP request to your backend
        // which would then validate the token with the hCaptcha API

        // For demonstration purposes, assuming token presence is valid
        // In production, implement proper server-side validation
        return !string.IsNullOrEmpty(token);
    }
}
