@page "/profile/{Username}"
@inject UniNotes.Services.UserService UserService
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthStateProvider

<PageTitle>UniNotes - @(IsCurrentUserProfile ? "My Profile" : $"{user?.Username}'s Profile")</PageTitle>
<link href="https://fonts.googleapis.com/css2?family=Lobster&display=swap" rel="stylesheet">
<link href="https://fonts.googleapis.com/css2?family=Roboto&display=swap" rel="stylesheet">
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.1/css/all.min.css">

<!-- Περιοχή για το animation σωματιδίων -->
<div id="particles-js"></div>
<script src="js/particles/particles.js"></script>
<script>
    particlesJS.load('particles-js', 'js/particles/particles.json', function () {});
</script>

<CascadingAuthenticationState>
    <AuthorizeView>
        <Authorized>
            <!-- Καρτέλες πλοήγησης -->
            <div class="navigation-tabs">
                <a class="nav-tab @(IsCurrentPage("/dashboard") ? "active" : "")" @onclick='() => NavigationManager.NavigateTo("/dashboard")'>
                    <i class="fa-solid fa-gauge-high"></i>
                    <span>Dashboard</span>
                </a>
                <a class="nav-tab @(IsCurrentPage("/notes") ? "active" : "")" @onclick='() => NavigationManager.NavigateTo("/notes")'>
                    <i class="fa-solid fa-note-sticky"></i>
                    <span>Φόρουμ Σημειώσεων</span>
                </a>
                <a class="nav-tab @(IsCurrentPage("/MyNotes") ? "active" : "")" @onclick='() => NavigationManager.NavigateTo("/MyNotes")'>
                    <i class="fa-solid fa-note-sticky"></i>
                    <span>Οι Σημειώσεις μου</span>
                </a>
                <a class="nav-tab @(IsCurrentPage("/upload") ? "active" : "")" @onclick='() => NavigationManager.NavigateTo("/upload")'>
                    <i class="fa-solid fa-file-arrow-up"></i>
                    <span>Ανέβασε Σημειώσεις</span>
                </a>
                <a class="nav-tab @(IsCurrentPage("/report") ? "active" : "")" @onclick='() => NavigationManager.NavigateTo("/report")'>
                    <i class="fa-solid fa-flag"></i>
                    <span>Αναφορά</span>
                </a>
                <a class="nav-tab @(IsCurrentPage("/settings") ? "active" : "")" @onclick='() => NavigationManager.NavigateTo("/settings")'>
                    <i class="fa-solid fa-gear"></i>
                    <span>Ρυθμίσεις</span>
                </a>
                @if (currentUser?.IsAdmin == true)
                {
                    <a class="nav-tab @(IsCurrentPage("/admin") ? "active" : "")" @onclick='() => NavigationManager.NavigateTo("/admin")'>
                        <i style="color: cornflowerblue;" class="fa-solid fa-user-tie"></i>
                        <span style="color: cornflowerblue;">Admin Panel</span>
                    </a>
                }
                @if (currentUser?.IsSecretary == true)
                {
                    <a class="nav-tab @(IsCurrentPage("/secretary") ? "active" : "")" @onclick='() => NavigationManager.NavigateTo("/secretary")'>
                        <i style="color: yellow" class="fa-solid fa-envelope"></i>
                        <span style="color: yellow">Γραμματεία</span>
                    </a>
                }
                <div class="user-profile">
                    <button class="user-name-button" @onclick='() => NavigationManager.NavigateTo($"/profile/{currentUser?.Username}", forceLoad: true)'>
                        @((currentUser?.FirstName ?? "") + " " + (currentUser?.LastName ?? ""))
                    </button>
                    <div class="user-icon" @onclick="HandleLogout">
                        <i class="fa-solid fa-right-from-bracket"></i>
                    </div>
                </div>
            </div>

            <!-- Περιοχή περιεχομένου με το προφίλ χρήστη -->
            <div style="padding-top: 80px; padding-bottom: 40px; min-height: 100vh; width: 100%;">
                <div style="max-width: 800px; margin: 0 auto; text-align: center;">
                    <h1 style="font-family: 'Lobster', cursive; font-size: 3.5rem; margin-bottom: 30px; color: white;">
                        @(IsCurrentUserProfile ? "My Profile" : $"{user?.Username}'s Profile")
                    </h1>

                    <!-- Ένδειξη φόρτωσης -->
                    @if (isLoading)
                    {
                        <div style="display: flex; justify-content: center; margin: 50px 0;">
                            <div style="border: 4px solid rgba(255,255,255,0.3); border-top: 4px solid white; border-radius: 50%; width: 40px; height: 40px; animation: spin 1s linear infinite;"></div>
                        </div>
                    }
                    else if (user != null)
                    {
                        <!-- Κάρτα προφίλ με τα στοιχεία του χρήστη -->
                        <div style="background: rgba(0,0,0,0.6); border-radius: 15px; padding: 30px; margin: 20px auto; box-shadow: 0 4px 15px rgba(0,0,0,0.3); color: white; text-align: center;">
                            <!-- Εικόνα προφίλ και όνομα χρήστη -->
                            <div style="display: flex; align-items: center; justify-content: center; margin-bottom: 30px;">
                                <img src="@GetAvatarUrl(user.Username)" alt="User Avatar" style="width: 80px; height: 80px; border-radius: 50%; margin-right: 20px; background-color: #add8e6;" />
                                <div style="text-align: left;">
                                    <h2 style="font-size: 2rem; margin: 0 0 5px 0;">
                                        @user.FirstName @user.LastName
                                        <!-- Εμφάνιση σήματος διαχειριστή αν ο χρήστης είναι admin -->
                                        @if (user.IsAdmin)
                                        {
                                            <span class="admin-badge" title="Administrator">
                                                <i class="fa-solid fa-shield-halved"></i> ADMIN
                                            </span>
                                        }
                                        <!-- Εμφάνιση σήματος γραμματέα αν ο χρήστης είναι γραμματέας -->
                                        @if (user.IsSecretary)
                                        {
                                            <span class="secretary-badge" title="Secretary">
                                                <i class="fa-solid fa-user-tie"></i> SECRETARY
                                            </span>
                                        }
                                        <!-- Εμφάνιση σήματος αξιόπιστου χρήστη αν η βαθμολογία είναι υψηλή -->
                                        @if (user.AverageNotesRating > 4.5)
                                        {
                                            <span class="verified-badge" title="Verified User">
                                                <i class="fa-solid fa-check-circle"></i> TRUSTED
                                            </span>
                                        }
                                    </h2>
                                    <p style="margin: 0; opacity: 0.8;">AKA: <strong>@user.Username</strong></p>
                                </div>
                            </div>

                            <!-- Λεπτομέρειες χρήστη -->
                            <div style="background: rgba(255,255,255,0.1); border-radius: 10px; padding: 20px; margin-bottom: 30px; text-align: left;">
                                <div style="display: flex; align-items: center; margin-bottom: 15px;">
                                    <i class="fa-solid fa-envelope" style="width: 30px; color: #add8e6;"></i>
                                    <span>@user.Email</span>
                                </div>
                                <div style="display: flex; align-items: center;">
                                    <i class="fa-solid fa-calendar" style="width: 30px; color: #add8e6;"></i>
                                    <span>Member Since: @user.CreatedAt.ToString("MMMM dd, yyyy")</span>
                                </div>
                            </div>

                            <!-- Τμήμα στατιστικών -->
                            <h3 style="font-size: 1.5rem; margin: 0 0 20px 0;">Στατιστικά Σημειώσεων</h3>
                            <div style="display: flex; justify-content: space-between; flex-wrap: wrap;">
                                <!-- Μέση βαθμολογία σημειώσεων -->
                                <div style="flex: 1; min-width: 150px; background: rgba(255,255,255,0.1); border-radius: 10px; padding: 20px; margin: 0 5px 10px 5px;">
                                    <i class="fa-solid fa-star" style="font-size: 2rem; color: gold;"></i>
                                    <div style="font-size: 1.8rem; font-weight: bold; margin-top: 10px;">@user.AverageNotesRating.ToString("0.00")</div>
                                    <div style="opacity: 0.7;">Μ.Ο.</div>
                                </div>

                                <!-- Συνολικός αριθμός σημειώσεων -->
                                <div style="flex: 1; min-width: 150px; background: rgba(255,255,255,0.1); border-radius: 10px; padding: 20px; margin: 0 5px 10px 5px;">
                                    <i class="fa-solid fa-file-alt" style="font-size: 2rem; color: #add8e6;"></i>
                                    <div style="font-size: 1.8rem; font-weight: bold; margin-top: 10px;">@user.NoteIds.Count</div>
                                    <div style="opacity: 0.7;">Συνολικές Σημειώσεις</div>
                                </div>

                                <!-- Συνολικές αξιολογήσεις που έχει λάβει -->
                                <div style="flex: 1; min-width: 150px; background: rgba(255,255,255,0.1); border-radius: 10px; padding: 20px; margin: 0 5px 10px 5px;">
                                    <i class="fa-solid fa-thumbs-up" style="font-size: 2rem; color: lightgreen;"></i>
                                    <div style="font-size: 1.8rem; font-weight: bold; margin-top: 10px;">@user.TotalRatingsReceived</div>
                                    <div style="opacity: 0.7;">Βαθμολογήσεις</div>
                                </div>
                            </div>
                        </div>
                    }
                </div>
            </div>
        </Authorized>
        <NotAuthorized>
        </NotAuthorized>
    </AuthorizeView>
</CascadingAuthenticationState>

@code {
    // Μεταβλητές για τον χρήστη του προφίλ και τον συνδεδεμένο χρήστη
    private User? user;
    private bool isLoading = true;
    private bool initialized = false;
    private string? currentUserId;
    private User? currentUser;
    private string? previousUsername;

    // Παράμετρος από το URL για το όνομα χρήστη του προφίλ
    [Parameter]
    public string? Username { get; set; }

    // Μήνυμα σφάλματος
    private string? errorMessage;

    // Έλεγχος αν το προφίλ ανήκει στον συνδεδεμένο χρήστη
    private bool IsCurrentUserProfile => string.IsNullOrEmpty(Username) ||
                                       (currentUser != null && Username == currentUser.Username);

    // Δημιουργία URL εικόνας προφίλ από το DiceBear API
    private string GetAvatarUrl(string GUID)
    {
        // Χρήση μοναδικού αναγνωριστικού για τη δημιουργία τυχαίου avatar
        return $"https://api.dicebear.com/9.x/notionists-neutral/svg?seed={Guid.NewGuid().ToString()}";
    }

    // Αρχικοποίηση και φόρτωση δεδομένων συνδεδεμένου χρήστη
    protected override async Task OnInitializedAsync()
    {
        try
        {
            // Έλεγχος αυθεντικοποίησης
            var authState = await AuthStateProvider.GetAuthenticationStateAsync();
            var userClaims = authState.User;

            if (!userClaims.Identity?.IsAuthenticated ?? true)
            {
                // Ανακατεύθυνση στη σύνδεση αν ο χρήστης δεν είναι συνδεδεμένος
                NavigationManager.NavigateTo("/login", forceLoad: true);
                return;
            }

            // Ανάκτηση του ID του συνδεδεμένου χρήστη
            currentUserId = userClaims.FindFirst(ClaimTypes.NameIdentifier)?.Value;

            if (string.IsNullOrWhiteSpace(currentUserId))
            {
                // Ανακατεύθυνση στη σύνδεση αν δεν υπάρχει ID
                NavigationManager.NavigateTo("/login", forceLoad: true);
                return;
            }

            // Ανάκτηση πληροφοριών συνδεδεμένου χρήστη
            currentUser = await UserService.GetUserByIdAsync(currentUserId);
        }
        catch (Exception ex)
        {
            errorMessage = $"Error loading profile: {ex.Message}";
        }
    }

    // Επανεξέταση παραμέτρων και φόρτωση δεδομένων όταν αλλάζει το όνομα χρήστη
    protected override async Task OnParametersSetAsync()
    {
        if (!initialized || previousUsername != Username)
        {
            previousUsername = Username;
            await LoadUserData();
            initialized = true;
        }
    }

    // Φόρτωση δεδομένων χρήστη από το όνομα χρήστη στο URL
    private async Task LoadUserData()
    {
        isLoading = true;
        try
        {
            // Αν παρέχεται όνομα χρήστη στις παραμέτρους, φόρτωση του αντίστοιχου προφίλ
            if (!string.IsNullOrEmpty(Username))
            {
                user = await UserService.GetUserByUsernameAsync(Username);
                if (user == null)
                {
                    errorMessage = "User not found";
                    // Αν ο χρήστης δεν βρέθηκε, χρήση του τρέχοντος χρήστη ως εναλλακτική
                    user = currentUser;
                }
            }
            else
            {
                // Αν δεν παρέχεται όνομα χρήστη, φόρτωση του προφίλ του συνδεδεμένου χρήστη
                user = currentUser;
            }

            // Αν δεν βρέθηκε χρήστης, αποσύνδεση και ανακατεύθυνση
            if (user is null)
            {
                var authProvider = (BlazorAuthStateProvider)AuthStateProvider;
                await authProvider.UpdateAuthenticationState(null);
                NavigationManager.NavigateTo("/login", forceLoad: true);
                return;
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error loading profile: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }

    // Χειρισμός αποσύνδεσης
    private async Task HandleLogout()
    {
        var authStateProvider = (BlazorAuthStateProvider)AuthStateProvider;
        await authStateProvider.UpdateAuthenticationState(null);
        NavigationManager.NavigateTo("/", forceLoad: true);
    }

    // Ανακατεύθυνση στη σελίδα σύνδεσης
    private void RedirectToLogin()
    {
        NavigationManager.NavigateTo("/login");
    }

    // Έλεγχος αν η τρέχουσα σελίδα ταιριάζει με τη δοθείσα διαδρομή
    private bool IsCurrentPage(string path)
    {
        return NavigationManager.Uri.EndsWith(path, StringComparison.OrdinalIgnoreCase);
    }
}