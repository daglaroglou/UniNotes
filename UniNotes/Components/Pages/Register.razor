@page "/register"
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
@inject UserService UserService
@implements IDisposable

@attribute [StreamRendering]

<PageTitle>UniNotes - Register</PageTitle>

<link href="https://fonts.googleapis.com/css2?family=Lobster&display=swap" rel="stylesheet">

<div id="particles-js"></div>

<script src="js/particles/particles.js"></script>
<script src="https://js.hcaptcha.com/1/api.js?render=explicit" async defer></script>
<script>
    particlesJS.load('particles-js', 'js/particles/particles.json', function () {});

    // Global hCaptcha handler functions
    window.hCaptchaFunctions = {
        renderCaptcha: function() {
            // Check if hcaptcha is loaded and remove any existing widgets first
            if (typeof hcaptcha !== 'undefined') {
                // Get all existing widget IDs and reset them
                try {
                    hcaptcha.reset();
                } catch (e) {
                    console.log("No widgets to reset");
                }

                // Render a new widget
                hcaptcha.render('h-captcha', {
                    sitekey: '4dce49f0-164e-45e6-ad6e-4740ccdcef90',
                    callback: function(token) {
                        // Use the instance method that references the component
                        DotNet.invokeMethodAsync('UniNotes', 'SetCaptchaToken', token);
                        console.log('Captcha completed with token: ' + token.substring(0, 10) + '...');
                    },
                    'expired-callback': function() {
                        DotNet.invokeMethodAsync('UniNotes', 'SetCaptchaToken', '');
                        console.log('Captcha expired');
                    }
                });
            } else {
                // If hCaptcha isn't loaded yet, try again in a moment
                setTimeout(window.hCaptchaFunctions.renderCaptcha, 500);
            }
        },
        
        isCaptchaLoaded: function() {
            return typeof hcaptcha !== 'undefined';
        }
    };
</script>

<div class="full-page-background">
    <center>
        <h1 class="logo">Register</h1>
    </center>

    <div class="login-form">
        <div class="input-row">
            <div class="input-container">
                <input type="text" placeholder="First Name" class="action-input" @bind="firstName" />
            </div>
            <div class="input-container">
                <input type="text" placeholder="Last Name" class="action-input" @bind="lastName" />
            </div>
        </div>
        <div class="input-row">
            <div class="input-container">
                <input type="text" placeholder="Username" class="action-input" @bind="username" />
            </div>
            <div class="input-container">
                <input type="text" placeholder="University ID Number" class="action-input" @bind="uniIdNumber" />
            </div>
        </div>
        <div class="input-row">
            <div class="input-container">
                <input type="email" placeholder="Email" class="action-input" @bind="email" />
            </div>
            <div class="input-container">
                <input type="password" placeholder="Password" class="action-input" @bind="password" />
            </div>
        </div>
        <div class="captcha-container">
            <div id="h-captcha"></div>
        </div>
        <div class="button-container">
            <button class="action-button" @onclick="HandleRegister">Register</button>
        </div>
        <br>
    </div>
    @if (!string.IsNullOrEmpty(successMessage))
    {
        <div class="success-message">@((MarkupString)successMessage)</div>
    }
    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="error-message">@((MarkupString)errorMessage)</div>
    }
</div>

@code {
    private string firstName = string.Empty;
    private string lastName = string.Empty;
    private string username = string.Empty;
    private string email = string.Empty;
    private string password = string.Empty;
    private string uniIdNumber = string.Empty;
    private string errorMessage = string.Empty;
    private string successMessage = string.Empty;
    private static string captchaToken = string.Empty;
    private bool isRedirecting = false;
    private DotNetObjectReference<Register>? objRef;
    private bool captchaInitialized = false;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // Register for JS interop
            objRef = DotNetObjectReference.Create(this);
            await JSRuntime.InvokeVoidAsync("hCaptchaFunctions.renderCaptcha");
            captchaInitialized = true;
        }
        else if (!firstRender && !captchaInitialized)
        {
            // Check if hCaptcha is loaded
            bool isLoaded = await JSRuntime.InvokeAsync<bool>("hCaptchaFunctions.isCaptchaLoaded");
            if (isLoaded && !captchaInitialized)
            {
                await JSRuntime.InvokeVoidAsync("hCaptchaFunctions.renderCaptcha");
                captchaInitialized = true;
            }
        }
    }

    public void Dispose()
    {
        objRef?.Dispose();
    }

    [JSInvokable]
    public static Task SetCaptchaToken(string token)
    {
        captchaToken = token;
        return Task.CompletedTask;
    }

    private async Task ResetCaptcha()
    {
        captchaToken = string.Empty;
        await JSRuntime.InvokeVoidAsync("hCaptchaFunctions.renderCaptcha");
    }

    private async Task HandleRegister()
    {
        // Prevent duplicate registration attempts
        if (isRedirecting) return;

        // Clear previous messages
        errorMessage = string.Empty;
        successMessage = string.Empty;

        // Check if captcha token is set
        if (string.IsNullOrEmpty(captchaToken))
        {
            errorMessage = "Please complete the captcha verification";
            return;
        }

        if (!string.IsNullOrEmpty(firstName) &&
            !string.IsNullOrEmpty(lastName) &&
            !string.IsNullOrEmpty(username) &&
            !string.IsNullOrEmpty(email) &&
            !string.IsNullOrEmpty(password) &&
            !string.IsNullOrEmpty(uniIdNumber) &&
            Funcs.Misc.IsValidEmail(email) &&
            Funcs.Misc.IsValidPassword(password) &&
            Funcs.Misc.IsValidUniID(uniIdNumber))
        {
            try
            {
                // Validate the captcha token
                bool captchaValid = await ValidateCaptchaAsync(captchaToken);

                if (!captchaValid)
                {
                    errorMessage = "Captcha validation failed. Please try again.";
                    await ResetCaptcha();
                    return;
                }

                // Create new user
                var newUser = new User
                {
                    FirstName = firstName,
                    LastName = lastName,
                    Username = username,
                    Email = email,
                    UniIdNumber = uniIdNumber
                };

                // Save to MongoDB
                bool result = await UserService.CreateAsync(newUser, password);

                if (result)
                {
                    successMessage = "Registration successful! Redirecting to login...";
                    StateHasChanged();

                    // Prevent duplicate redirections
                    isRedirecting = true;

                    await Task.Delay(2000);
                    Navigation.NavigateTo("/login");
                }
                else
                {
                    errorMessage = "Registration failed. Username or email already be in use.";
                    await ResetCaptcha();
                }
            }
            catch (Exception ex)
            {
                errorMessage = $"An error occurred: {ex.Message}";
                await ResetCaptcha();
            }
        }
        else
        {
            var errors = new List<string>();

            if (string.IsNullOrEmpty(firstName))
            {
                errors.Add("First Name is required");
            }

            if (string.IsNullOrEmpty(lastName))
            {
                errors.Add("Last Name is required");
            }

            if (string.IsNullOrEmpty(username))
            {
                errors.Add("Username is required");
            }

            if (string.IsNullOrEmpty(email))
            {
                errors.Add("Email is required");
            }
            else if (!Funcs.Misc.IsValidEmail(email))
            {
                errors.Add("Please enter a valid DAI UoM email address");
            }

            if (string.IsNullOrEmpty(password))
            {
                errors.Add("Password is required");
            }
            else if (!Funcs.Misc.IsValidPassword(password))
            {
                errors.Add("Password must be at least 8 characters and should include at least 1 uppercase letter, 1 lowercase letter and 1 number");
            }

            if (string.IsNullOrEmpty(uniIdNumber))
            {
                errors.Add("University ID is required");
            }
            else if (!Funcs.Misc.IsValidUniID(uniIdNumber))
            {
                errors.Add("Please enter a valid university ID (12 digits)");
            }

            errorMessage = string.Join("<br>", errors);
            await ResetCaptcha();
        }
    }

    private async Task<bool> ValidateCaptchaAsync(string token)
    {
        // In a real application, you would make an HTTP request to your backend
        // which would then validate the token with the hCaptcha API

        // For demonstration purposes, assuming token presence is valid
        // In production, implement proper server-side validation
        return !string.IsNullOrEmpty(token);
    }
}
