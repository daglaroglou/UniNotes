@page "/register"
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
@inject UserService UserService
@inject NavigationManager NavigationManager
@inject ICaptchaService CaptchaService
@implements IDisposable

@attribute [StreamRendering]

<PageTitle>UniNotes - Register</PageTitle>

<link href="https://fonts.googleapis.com/css2?family=Lobster&display=swap" rel="stylesheet">
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.1/css/all.min.css">

<!-- Περιέχον στοιχείο για το animation σωματιδίων -->
<div id="particles-js"></div>

<script src="js/particles/particles.js"></script>

<!-- Κουμπί επιστροφής στην αρχική σελίδα -->
<div class="back-button-container">
    <button class="action-button" @onclick="GoBack">
        <i class="fa-solid fa-arrow-left"></i> ΠΙΣΩ
    </button>
</div>

<script>
    particlesJS.load('particles-js', 'js/particles/particles.json', function () {});
</script>

<div class="full-page-background">
    <center>
        <h1 class="logo">Register</h1>
    </center>

    <!-- Φόρμα εγγραφής -->
    <div class="login-form">
        <!-- Πρώτη γραμμή: Όνομα και επώνυμο -->
        <div class="input-row">
            <div class="input-container">
                <input type="text" placeholder="Όνομα" class="action-input" @bind="firstName" />
            </div>
            <div class="input-container">
                <input type="text" placeholder="Επώνυμο" class="action-input" @bind="lastName" />
            </div>
        </div>
        <!-- Δεύτερη γραμμή: Username και αριθμός πάσου -->
        <div class="input-row">
            <div class="input-container">
                <input type="text" placeholder="Username" class="action-input" @bind="username" />
            </div>
            <div class="input-container">
                <input type="text" placeholder="Αριθμός Ακαδημαϊκού Πάσου" class="action-input" @bind="uniIdNumber" />
            </div>
        </div>
        <!-- Τρίτη γραμμή: Email και κωδικός πρόσβασης -->
        <div class="input-row">
            <div class="input-container">
                <input type="email" placeholder="Email" class="action-input" @bind="email" />
            </div>
            <div class="input-container">
                <input type="password" placeholder="Κωδικός Πρόσβασης" class="action-input" @bind="password" />
            </div>
        </div>
        <!-- Περιοχή CAPTCHA για προστασία από bots -->
        <div class="captcha-container">
            <div class="captcha-image">
                <img src="@captchaImageUrl" alt="CAPTCHA" />
                <button class="refresh-captcha" @onclick="RefreshCaptchaAsync" title="Refresh CAPTCHA">
                    <i class="fa-solid fa-arrows-rotate"></i>
                </button>
            </div>
            <div class="captcha-input">
                <input type="text" placeholder="Enter the code above" class="action-input" @bind="captchaInput" />
            </div>
        </div>
        <!-- Κουμπί ολοκλήρωσης εγγραφής -->
        <div class="button-container">
            <button class="action-button" @onclick="HandleRegister"><i class="fa-solid fa-user-plus"></i> Register</button>
        </div>
        <br>
    </div>
    <!-- Εμφάνιση μηνύματος επιτυχίας ή σφάλματος -->
    @if (!string.IsNullOrEmpty(successMessage))
    {
        <div class="success-message">@((MarkupString)successMessage)</div>
    }
    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="error-message">@((MarkupString)errorMessage)</div>
    }
</div>

@code {
    // Δεδομένα φόρμας
    private string firstName = string.Empty;
    private string lastName = string.Empty;
    private string username = string.Empty;
    private string email = string.Empty;
    private string password = string.Empty;
    private string uniIdNumber = string.Empty;

    // Μηνύματα κατάστασης
    private string errorMessage = string.Empty;
    private string successMessage = string.Empty;
    private bool isRedirecting = false;

    // Μεταβλητές για το CAPTCHA
    private string captchaImageUrl = string.Empty;
    private string captchaInput = string.Empty;
    private string captchaId = string.Empty;

    // Αρχικοποίηση με δημιουργία νέου CAPTCHA
    protected override async Task OnInitializedAsync()
    {
        await GenerateCaptchaAsync();
    }

    // Δημιουργία νέου CAPTCHA από την υπηρεσία
    private async Task GenerateCaptchaAsync()
    {
        var captchaResult = await CaptchaService.GenerateCaptchaAsync();
        captchaId = captchaResult.CaptchaId;
        captchaImageUrl = captchaResult.ImageUrl;
        captchaInput = string.Empty; // Καθαρισμός προηγούμενης εισόδου
    }

    // Ανανέωση του CAPTCHA με κουμπί
    private async Task RefreshCaptchaAsync()
    {
        await GenerateCaptchaAsync();
    }

    // Χειρισμός της υποβολής φόρμας εγγραφής
    private async Task HandleRegister()
    {
        // Αποτροπή διπλών προσπαθειών εγγραφής
        if (isRedirecting) return;

        // Καθαρισμός προηγούμενων μηνυμάτων
        errorMessage = string.Empty;
        successMessage = string.Empty;

        // Έλεγχος αν εισήχθη ο κωδικός CAPTCHA
        if (string.IsNullOrEmpty(captchaInput))
        {
            errorMessage = "Please enter the CAPTCHA code";
            return;
        }

        // Έλεγχος εγκυρότητας όλων των πεδίων
        if (!string.IsNullOrEmpty(firstName) &&
            !string.IsNullOrEmpty(lastName) &&
            !string.IsNullOrEmpty(username) &&
            !string.IsNullOrEmpty(email) &&
            !string.IsNullOrEmpty(password) &&
            !string.IsNullOrEmpty(uniIdNumber) &&
            Funcs.Misc.IsValidEmail(email) &&
            Funcs.Misc.IsValidPassword(password) &&
            Funcs.Misc.IsValidUniID(uniIdNumber))
        {
            try
            {
                // Επικύρωση του CAPTCHA
                bool captchaValid = await CaptchaService.ValidateCaptchaAsync(captchaId, captchaInput);

                if (!captchaValid)
                {
                    errorMessage = "CAPTCHA validation failed. Please try again.";
                    await GenerateCaptchaAsync(); // Δημιουργία νέου captcha
                    return;
                }

                // Δημιουργία νέου χρήστη
                var newUser = new User
                {
                    FirstName = firstName,
                    LastName = lastName,
                    Username = username,
                    Email = email,
                    UniIdNumber = uniIdNumber
                };

                // Αποθήκευση στη βάση δεδομένων MongoDB
                bool result = await UserService.CreateAsync(newUser, password);

                if (result)
                {
                    // Επιτυχής εγγραφή, εμφάνιση μηνύματος και ανακατεύθυνση
                    successMessage = "Registration successful! Redirecting to login...";
                    StateHasChanged();

                    // Αποτροπή διπλών ανακατευθύνσεων
                    isRedirecting = true;

                    await Task.Delay(2000);
                    Navigation.NavigateTo("/login");
                }
                else
                {
                    // Αποτυχία εγγραφής (πιθανώς λόγω διπλού ονόματος χρήστη ή email)
                    errorMessage = "Registration failed. Username or email already be in use.";
                    await GenerateCaptchaAsync(); // Δημιουργία νέου CAPTCHA
                }
            }
            catch (Exception ex)
            {
                // Χειρισμός σφαλμάτων
                errorMessage = $"An error occurred: {ex.Message}";
                await GenerateCaptchaAsync(); // Δημιουργία νέου CAPTCHA
            }
        }
        else
        {
            // Αναλυτικός έλεγχος εγκυρότητας και συλλογή μηνυμάτων σφάλματος
            var errors = new List<string>();

            if (string.IsNullOrEmpty(firstName))
            {
                errors.Add("First Name is required");
            }

            if (string.IsNullOrEmpty(lastName))
            {
                errors.Add("Last Name is required");
            }

            if (string.IsNullOrEmpty(username))
            {
                errors.Add("Username is required");
            }

            if (string.IsNullOrEmpty(email))
            {
                errors.Add("Email is required");
            }
            else if (!Funcs.Misc.IsValidEmail(email))
            {
                errors.Add("Please enter a valid DAI UoM email address");
            }

            if (string.IsNullOrEmpty(password))
            {
                errors.Add("Password is required");
            }
            else if (!Funcs.Misc.IsValidPassword(password))
            {
                errors.Add("Password must be at least 8 characters");
            }

            if (string.IsNullOrEmpty(uniIdNumber))
            {
                errors.Add("University ID is required");
            }
            else if (!Funcs.Misc.IsValidUniID(uniIdNumber))
            {
                errors.Add("Please enter a valid university ID (12 digits)");
            }

            // Συνένωση όλων των μηνυμάτων σφάλματος
            errorMessage = string.Join("<br>", errors);
            await GenerateCaptchaAsync(); // Δημιουργία νέου CAPTCHA
        }
    }

    // Επιστροφή στην αρχική σελίδα
    private void GoBack()
    {
        Navigation.NavigateTo("/", forceLoad: false);
    }

    // Απελευθέρωση πόρων κατά την απόρριψη του component
    public void Dispose()
    {
        // Καθαρισμός τυχόν πόρων
    }
}