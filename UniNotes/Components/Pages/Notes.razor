@page "/notes"
@inject UniNotes.Services.UserService UserService
@inject UniNotes.Services.NoteService NoteService
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthStateProvider
@inject IJSRuntime JSRuntime

<PageTitle>UniNotes - All Notes</PageTitle>
<link href="https://fonts.googleapis.com/css2?family=Mynerve&display=swap" rel="stylesheet">
<link href="https://fonts.googleapis.com/css2?family=Roboto&display=swap" rel="stylesheet">
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.1/css/all.min.css">

<!-- Φόντο με κινούμενα σωματίδια -->
<div id="particles-js"></div>
<script src="js/particles/particles.js"></script>
<script>
    particlesJS.load('particles-js', 'js/particles/particles.json', function () {});
</script>

<CascadingAuthenticationState>
    <AuthorizeView>
        <Authorized>
            <!-- Καρτέλες πλοήγησης -->
            <div class="navigation-tabs">
                <div class="nav-tab @(IsCurrentPage("/dashboard") ? "active" : "")" @onclick='() => NavigationManager.NavigateTo("/dashboard")'>
                    <i class="fa-solid fa-gauge-high"></i>
                    <span>Dashboard</span>
                </div>
                <div class="nav-tab @(IsCurrentPage("/notes") ? "active" : "")" @onclick='() => NavigationManager.NavigateTo("/notes")'>
                    <i class="fa-solid fa-note-sticky"></i>
                    <span>Φόρουμ Σημειώσεων</span>
                </div>
                <div class="nav-tab @(IsCurrentPage("/MyNotes") ? "active" : "")" @onclick='() => NavigationManager.NavigateTo("/MyNotes")'>
                    <i class="fa-solid fa-note-sticky"></i>
                    <span>Οι Σημειώσεις μου</span>
                </div>
                <div class="nav-tab @(IsCurrentPage("/upload") ? "active" : "")" @onclick='() => NavigationManager.NavigateTo("/upload")'>
                    <i class="fa-solid fa-file-arrow-up"></i>
                    <span>Ανέβασε Σημειώσεις</span>
                </div>
                <div class="nav-tab @(IsCurrentPage("/report") ? "active" : "")" @onclick='() => NavigationManager.NavigateTo("/report")'>
                    <i class="fa-solid fa-flag"></i>
                    <span>Αναφορά</span>
                </div>
                <div class="nav-tab @(IsCurrentPage("/settings") ? "active" : "")" @onclick='() => NavigationManager.NavigateTo("/settings")'>
                    <i class="fa-solid fa-gear"></i>
                    <span>Ρυθμίσεις</span>
                </div>
                @if (user?.IsAdmin == true)
                {
                    <div class="nav-tab @(IsCurrentPage("/admin") ? "active" : "")" @onclick='() => NavigationManager.NavigateTo("/admin")'>
                        <i style="color: cornflowerblue;" class="fa-solid fa-user-tie"></i>
                        <span style="color: cornflowerblue;">Admin Panel</span>
                    </div>
                }
                @if (user?.IsSecretary == true)
                {
                    <div class="nav-tab @(IsCurrentPage("/secretary") ? "active" : "")" @onclick='() => NavigationManager.NavigateTo("/secretary")'>
                        <i style="color: yellow" class="fa-solid fa-envelope"></i>
                        <span style="color: yellow">Γραμματεία</span>
                    </div>
                }
                <div class="user-profile">
                    <button class="user-name-button" @onclick='() => NavigationManager.NavigateTo($"/profile/{user?.Username}", forceLoad: true)'>
                        @((user?.FirstName ?? "") + " " + (user?.LastName ?? ""))
                    </button>
                    <div class="user-icon" @onclick="HandleLogout">
                        <i class="fa-solid fa-right-from-bracket"></i>
                    </div>
                </div>
            </div>

            <div class="full-page-background">
                <!-- Κύριο περιεχόμενο - Προβολή όλων των διαθέσιμων σημειώσεων -->
                <div class="notes-container">
                    <h1 class="logo">Φόρουμ Σημειώσεων</h1>

                    <!-- Ένδειξη φόρτωσης -->
                    @if (isLoading)
                    {
                        <div class="spinner-container">
                            <div class="spinner"></div>
                            <p style="color: white;"> Φόρτωση σημειώσεων...</p>
                        </div>
                    }
                    else if (errorMessage != null)
                    {
                    <div class="message-container">
                        <div class="error-message">@errorMessage</div>
                    </div>
                    }
                    else if (allNotes == null || !allNotes.Any())
                    {
                    <div class="empty-state">
                        <i class="fa-solid fa-folder-open fa-3x mb-3"></i>
                        <h3>Δεν υπάρχουν διαθέσιμες σημειώσεις.</h3>
                        <p>Δεν υπάρχουν ανεβασμένες σημειώσεις ακόμα.</p>
                    </div>
                    }
                    else
                    {
                    <!-- Φίλτρα αναζήτησης και ταξινόμησης -->
                    <div class="filter-container">
                        <div class="filter-group">
                            <label for="subjectFilter">Φιλτράρισμα ανα Μάθημα:</label>
                            <select id="subjectFilter" class="form-control" @bind="selectedSubject">
                                <option value="">Όλα τα μαθήματα</option>
                                @foreach (var subject in subjectList)
                                {
                                    <option value="@subject">@subject</option>
                                }
                            </select>
                        </div>

                        <div class="filter-group">
                            <label for="semesterFilter">Φιλτραρισμα ανα Εξάμηνο:</label>
                            <select id="semesterFilter" class="form-control" @bind="selectedSemester" @bind:after="OnSemesterChanged">
                                <option value="0">Όλα τα Εξάμηνα</option>
                                @for (int i = 1; i <= 8; i++)
                                {
                                    <option value="@i">Εξάμηνο @i</option>
                                }
                            </select>
                        </div>
                    </div>

                    <!-- Πλέγμα σημειώσεων -->
                    <div class="notes-grid">
                        @foreach (var note in filteredNotes)
                        {
                            <div class="note-card">
                                <!-- Επικεφαλίδα κάρτας -->
                                <div class="note-header">
                                    <h3 class="note-title">@note.Title</h3>
                                    <span class="note-date">@note.CreatedAt.ToString("MMM dd, yyyy")</span>
                                </div>

                                <!-- Προεπισκόπηση περιεχομένου -->
                                <div class="note-preview">
                                    @if (IsPdfFile(note))
                                    {
                                        <div class="file-preview pdf-preview">
                                            <i class="fa-solid fa-file-pdf fa-2x"></i>
                                            <span>PDF Αρχείο</span>
                                        </div>
                                    }
                                    else if (IsImageFile(note))
                                    {
                                        <div class="file-preview image-preview">
                                            <img src="@GetImageDataUrl(note)" alt="@note.Title" />
                                        </div>
                                    }
                                    else if (IsWordFile(note))
                                    {
                                        <div class="file-preview word-preview">
                                            <i class="fa-solid fa-file-word fa-2x"></i>
                                            <span>Word Αρχείο</span>
                                        </div>
                                    }
                                </div>

                                <!-- Κύριο μέρος κάρτας σημείωσης -->
                                <div class="note-body">
                                    <p class="note-description">@(GetDescriptionPreview(note.Description))</p>
                                    <div class="note-metadata">
                                        <span><i class="fa-solid fa-book"></i> @note.Subject</span>
                                        <span><i class="fa-solid fa-graduation-cap"></i> Εξάμηνο @note.Semester</span>
                                        <span>
                                            <i class="fa-solid fa-user"></i>
                                            <a class="username-link" @onclick="() => NavigateToUserProfile(note.Username)">@note.Username</a>
                                        </span>
                                    </div>

                                    <!-- Περιοχή αξιολόγησης σημείωσης -->
                                    <div class="rating-container">
                                        <div class="average-rating">
                                            <span><i class="fa-solid fa-star"></i> @(note.AverageRating > 0 ? note.AverageRating.ToString("F1") : "Καμία Αξιολόγηση")</span>
                                            <span class="rating-count">(@(note.Ratings?.Count ?? 0))</span>
                                        </div>

                                        <div class="user-rating-container">
                                            <div class="user-rating">
                                                @for (int i = 1; i <= 5; i++)
                                                {
                                                    var starValue = i;
                                                    var isRated = userRatings.ContainsKey(note.Id ?? "") && userRatings[note.Id ?? ""] >= starValue;
                                                    <span class="star @(isRated ? "rated" : "")" @onclick="@(async () => await RateNote(note.Id ?? "", starValue))">
                                                        <i class="@(isRated ? "fa-solid" : "fa-regular") fa-star"></i>
                                                    </span>
                                                }
                                            </div>

                                            @if (userRatings.ContainsKey(note.Id ?? ""))
                                            {
                                                <button class="remove-rating-btn" @onclick="@(async () => await RemoveRating(note.Id ?? ""))">
                                                    <i class="fa-solid fa-times"></i>
                                                </button>
                                            }
                                        </div>
                                    </div>

                                    <!-- Ετικέτες σημείωσης -->
                                    <div class="note-tags">
                                        @if (note.Tags != null && note.Tags.Any())
                                        {
                                            @foreach (var tag in note.Tags)
                                            {
                                                <span class="note-tag"><i class="fa-solid fa-tag"></i> @tag</span>
                                            }
                                        }
                                    </div>
                                </div>

                                <!-- Ενέργειες για τη σημείωση -->
                                <div class="note-actions">
                                    <button class="action-button view-button" @onclick="() => ViewNote(note)">
                                        @if (IsWordFile(note))
                                        {
                                            <span><i class="fa-solid fa-download"></i> Κατεβάστε</span>
                                        }
                                        else
                                        {
                                            <span><i class="fa-solid fa-eye"></i> Προβολή</span>
                                        }
                                    </button>
                                </div>
                            </div>
                        }
                    </div>
                    }
                </div>
            </div>
        </Authorized>
        <NotAuthorized>
        </NotAuthorized>
    </AuthorizeView>
</CascadingAuthenticationState>

@code {
    // Βασικές μεταβλητές για τη λίστα σημειώσεων και τις καταστάσεις
    private List<Note>? allNotes;
    private bool isLoading = true;
    private string? errorMessage;
    private string selectedSubject = "";
    private int selectedSemester = 0;
    private List<string> subjectList = new List<string>();
    private Dictionary<string, string> imageCache = new Dictionary<string, string>();
    private Dictionary<string, int> userRatings = new Dictionary<string, int>();

    // Μεταβλητές σχετικές με το χρήστη για το μενού αναπτυσσόμενων επιλογών
    private bool isUserMenuOpen = false;
    private User? user;
    private string? userId;

    // Αρχικοποίηση της σελίδας
    protected override async Task OnInitializedAsync()
    {
        try
        {
            // Λήψη δεδομένων χρήστη για το μενού αναπτυσσόμενων επιλογών
            var authState = await AuthStateProvider.GetAuthenticationStateAsync();
            var userClaims = authState.User;

            if (userClaims.Identity?.IsAuthenticated == true)
            {
                userId = userClaims.FindFirst(ClaimTypes.NameIdentifier)?.Value;
                if (!string.IsNullOrEmpty(userId))
                {
                    user = await UserService.GetUserByIdAsync(userId);
                }
            }
            else
            {
                NavigationManager.NavigateTo("/");
                return;
            }

            // Φόρτωση όλων των σημειώσεων μαζί με τις αξιολογήσεις του χρήστη
            allNotes = await NoteService.GetNotesWithUserRatingsAsync();

            // Εξαγωγή μοναδικών μαθημάτων για το φίλτρο
            if (allNotes != null && allNotes.Any())
            {
                subjectList = allNotes
                    .Select(n => n.Subject)
                    .Where(s => !string.IsNullOrEmpty(s))
                    .Distinct()
                    .OrderBy(s => s)
                    .ToList();
            }

            // Φόρτωση των αξιολογήσεων του χρήστη στο τοπικό λεξικό
            if (allNotes != null)
            {
                foreach (var note in allNotes)
                {
                    if (note.Id != null && note.UserRating.HasValue)
                    {
                        userRatings[note.Id] = note.UserRating.Value;
                    }
                }
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error loading notes: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }

    // Ορισμός του βοηθητικού JavaScript που θα χρησιμοποιηθεί για λήψη αρχείων
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JSRuntime.InvokeVoidAsync("eval", @"
                window.downloadFile = (base64Data, mimeType, fileName) => {
                    const linkSource = `data:${mimeType};base64,${base64Data}`;
                    const downloadLink = document.createElement('a');
                    downloadLink.href = linkSource;
                    downloadLink.download = fileName;
                    downloadLink.click();
                };
            ");
        }
    }

    // Υπολογισμένη ιδιότητα που επιστρέφει τις φιλτραρισμένες σημειώσεις
    private List<Note> filteredNotes => allNotes?
        .Where(n => string.IsNullOrEmpty(selectedSubject) || n.Subject == selectedSubject)
        .Where(n => selectedSemester == 0 || n.Semester == selectedSemester)
        .OrderByDescending(n => n.CreatedAt)
        .ToList() ?? new List<Note>();

    // Έλεγχος αν η τρέχουσα σελίδα ταιριάζει με τη διαδρομή
    private bool IsCurrentPage(string route)
    {
        return NavigationManager.Uri.EndsWith(route, StringComparison.OrdinalIgnoreCase);
    }

    // Εναλλαγή κατάστασης μενού χρήστη
    private void ToggleUserMenu()
    {
        isUserMenuOpen = !isUserMenuOpen;
    }

    // Διαδικασία αποσύνδεσης
    private async Task Logout()
    {
        if (AuthStateProvider is BlazorAuthStateProvider blazorAuthStateProvider)
        {
            await blazorAuthStateProvider.UpdateAuthenticationState(null);
            NavigationManager.NavigateTo("/");
        }
    }

    // Δημιουργία προεπισκόπησης περιγραφής με περιορισμένο μήκος
    private string GetDescriptionPreview(string description)
    {
        if (string.IsNullOrEmpty(description))
            return "No description";

        return description.Length > 100 ? description[..100] + "..." : description;
    }

    // Έλεγχος αν η σημείωση είναι αρχείο PDF
    private bool IsPdfFile(Note note)
    {
        if (note.Content == null || note.Content.Length < 5)
            return false;

        byte[] pdfSignature = new byte[] { 0x25, 0x50, 0x44, 0x46 }; // %PDF
        return note.Content.Take(4).SequenceEqual(pdfSignature);
    }

    // Έλεγχος αν η σημείωση είναι αρχείο εικόνας
    private bool IsImageFile(Note note)
    {
        if (note.Content == null || note.Content.Length < 10)
            return false;

        byte[] jpegSignature = new byte[] { 0xFF, 0xD8, 0xFF };
        byte[] pngSignature = new byte[] { 0x89, 0x50, 0x4E, 0x47 };

        return note.Content.Take(3).SequenceEqual(jpegSignature) || note.Content.Take(4).SequenceEqual(pngSignature);
    }

    // Έλεγχος αν η σημείωση είναι αρχείο Word
    private bool IsWordFile(Note note)
    {
        if (note.Content == null || note.Content.Length < 10)
            return false;

        byte[] oleSignature = new byte[] { 0xD0, 0xCF, 0x11, 0xE0 };
        byte[] zipSignature = new byte[] { 0x50, 0x4B, 0x03, 0x04 };

        return note.Content.Take(4).SequenceEqual(oleSignature) ||
               note.Content.Take(4).SequenceEqual(zipSignature);
    }

    // Μετατροπή του περιεχομένου εικόνας σε URL δεδομένων για προεπισκόπηση
    private string GetImageDataUrl(Note note)
    {
        // Έλεγχος αν έχουμε ήδη αποθηκεύσει προσωρινά αυτή την εικόνα
        if (note.Id != null && imageCache.ContainsKey(note.Id))
        {
            return imageCache[note.Id];
        }

        // Αν η σημείωση δεν έχει περιεχόμενο ή ID, επιστροφή κενής συμβολοσειράς
        if (note.Id == null || note.Content == null || note.Content.Length == 0)
        {
            return string.Empty;
        }

        string mimeType = "image/jpeg"; // Προεπιλογή σε JPEG

        // Προσπάθεια καθορισμού του τύπου εικόνας από τα πρώτα bytes
        if (note.Content.Length > 4)
        {
            byte[] pngSignature = new byte[] { 0x89, 0x50, 0x4E, 0x47 };
            if (note.Content.Take(4).SequenceEqual(pngSignature))
            {
                mimeType = "image/png";
            }
        }

        // Μετατροπή του πίνακα byte σε συμβολοσειρά Base64
        string base64Data = Convert.ToBase64String(note.Content);
        string dataUrl = $"data:{mimeType};base64,{base64Data}";

        // Αποθήκευση του αποτελέσματος στην προσωρινή μνήμη για αποφυγή επανυπολογισμού
        imageCache[note.Id] = dataUrl;

        return dataUrl;
    }

    // Προβολή ή λήψη σημείωσης ανάλογα με τον τύπο της
    private async Task ViewNote(Note note)
    {
        if (note?.Id == null) return;

        if (IsWordFile(note))
        {
            // Για έγγραφα Word, προκαλείται λήψη
            string base64Data = Convert.ToBase64String(note.Content ?? Array.Empty<byte>());
            string mimeType = "application/vnd.openxmlformats-officedocument.wordprocessingml.document"; // .docx

            // Χρήση ασφαλούς ονόματος αρχείου βάσει του τίτλου της σημείωσης
            string fileName = string.IsNullOrEmpty(note.Title)
                ? "document.docx"
                : $"{note.Title.Replace(" ", "_")}.docx";

            await JSRuntime.InvokeVoidAsync("downloadFile", base64Data, mimeType, fileName);
        }
        else if (IsImageFile(note) || IsPdfFile(note))
        {
            // Πλοήγηση στη σελίδα προβολής σημείωσης
            NavigationManager.NavigateTo($"/note/{note.Id}");
        }
        else
        {
            // Πλοήγηση στη σελίδα προβολής σημείωσης για άλλους τύπους αρχείων
            NavigationManager.NavigateTo($"/note/{note.Id}");
        }
    }

    // Αξιολόγηση σημείωσης από το χρήστη
    private async Task RateNote(string noteId, int rating)
    {
        if (string.IsNullOrEmpty(noteId)) return;

        try
        {
            bool success = await NoteService.RateNoteAsync(noteId, rating);

            if (success)
            {
                // Ενημέρωση της τοπικής αξιολόγησης
                userRatings[noteId] = rating;

                // Ενημέρωση του μέσου όρου αξιολόγησης της σημείωσης στην τοπική λίστα
                var note = allNotes?.FirstOrDefault(n => n.Id == noteId);
                if (note != null)
                {
                    note.AverageRating = await NoteService.GetAverageRatingAsync(noteId);
                    note.Ratings = await NoteService.GetRatingsAsync(noteId);
                    note.UserRating = rating;
                }

                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error rating note: {ex.Message}";
        }
    }

    // Αφαίρεση αξιολόγησης
    private async Task RemoveRating(string noteId)
    {
        if (string.IsNullOrEmpty(noteId)) return;

        try
        {
            bool success = await NoteService.RemoveNoteRatingAsync(noteId);

            if (success)
            {
                // Αφαίρεση της τοπικής αξιολόγησης
                userRatings.Remove(noteId);

                // Ενημέρωση του μέσου όρου αξιολόγησης της σημείωσης στην τοπική λίστα
                var note = allNotes?.FirstOrDefault(n => n.Id == noteId);
                if (note != null)
                {
                    note.AverageRating = await NoteService.GetAverageRatingAsync(noteId);
                    note.Ratings = await NoteService.GetRatingsAsync(noteId);
                    note.UserRating = null;
                }

                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error removing rating: {ex.Message}";
        }
    }

    // Επιστροφή στην αρχική σελίδα
    private void GoBack()
    {
        NavigationManager.NavigateTo("/");
    }

    // Ενημέρωση της λίστας μαθημάτων όταν αλλάζει το εξάμηνο
    private void OnSemesterChanged()
    {
        // Έλεγχος αν υπάρχουν σημειώσεις για το επιλεγμένο εξάμηνο
        bool hasNotesForSemester = allNotes?.Any(n => selectedSemester == 0 || n.Semester == selectedSemester) ?? false;

        // Αν δεν υπάρχουν σημειώσεις για το εξάμηνο ή υπάρχουν αλλά δεν ταιριάζουν με το τρέχον μάθημα
        if (!hasNotesForSemester ||
            (hasNotesForSemester && !string.IsNullOrEmpty(selectedSubject) &&
             !allNotes!.Any(n => n.Semester == selectedSemester && n.Subject == selectedSubject)))
        {
            // Επαναφορά σε "Όλα τα μαθήματα"
            selectedSubject = "";
        }

        // Ενημέρωση της λίστας μαθημάτων για να εμφανίζονται μόνο τα σχετικά για το επιλεγμένο εξάμηνο
        UpdateSubjectList();
    }

    // Ενημέρωση της λίστας διαθέσιμων μαθημάτων με βάση το επιλεγμένο εξάμηνο
    private void UpdateSubjectList()
    {
        if (allNotes != null && allNotes.Any())
        {
            // Αν έχει επιλεγεί συγκεκριμένο εξάμηνο, φιλτράρισμα των μαθημάτων μόνο για αυτό το εξάμηνο
            if (selectedSemester > 0)
            {
                subjectList = allNotes
                    .Where(n => n.Semester == selectedSemester)
                    .Select(n => n.Subject)
                    .Where(s => !string.IsNullOrEmpty(s))
                    .Distinct()
                    .OrderBy(s => s)
                    .ToList();
            }
            else
            {
                // Αν έχει επιλεγεί "Όλα τα Εξάμηνα", εμφάνιση όλων των μαθημάτων
                subjectList = allNotes
                    .Select(n => n.Subject)
                    .Where(s => !string.IsNullOrEmpty(s))
                    .Distinct()
                    .OrderBy(s => s)
                    .ToList();
            }
        }
        else
        {
            subjectList = new List<string>();
        }
    }

    // Χειρισμός αποσύνδεσης χρήστη
    private void HandleLogout(MouseEventArgs args)
    {
        throw new NotImplementedException();
    }

    // Πλοήγηση στο προφίλ χρήστη
    private void NavigateToUserProfile(string username)
    {
        if (!string.IsNullOrEmpty(username))
        {
            NavigationManager.NavigateTo($"/profile/{username}");
        }
    }
}