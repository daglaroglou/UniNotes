@page "/settings"
@inject UniNotes.Services.UserService UserService
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthStateProvider
@inject IJSRuntime JSRuntime

<PageTitle>UniNotes - Settings</PageTitle>
<link href="https://fonts.googleapis.com/css2?family=Mynerve&display=swap" rel="stylesheet">
<link href="https://fonts.googleapis.com/css2?family=Roboto&display=swap" rel="stylesheet">
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.1/css/all.min.css">

<!-- Περιοχή για το animation σωματιδίων -->
<div id="particles-js"></div>
<script src="js/particles/particles.js"></script>
<script>
    particlesJS.load('particles-js', 'js/particles/particles.json', function () {});
</script>

<CascadingAuthenticationState>
    <AuthorizeView>
        <Authorized>
            <!-- Καρτέλες πλοήγησης -->
            <div class="navigation-tabs">
                <div class="nav-tab @(IsCurrentPage("/dashboard") ? "active" : "")" @onclick='() => NavigationManager.NavigateTo("/dashboard")'>
                    <i class="fa-solid fa-gauge-high"></i>
                    <span>Dashboard</span>
                </div>
                <div class="nav-tab @(IsCurrentPage("/notes") ? "active" : "")" @onclick='() => NavigationManager.NavigateTo("/notes")'>
                    <i class="fa-solid fa-note-sticky"></i>
                    <span>Φόρουμ Σημειώσεων</span>
                </div>
                <div class="nav-tab @(IsCurrentPage("/MyNotes") ? "active" : "")" @onclick='() => NavigationManager.NavigateTo("/MyNotes")'>
                    <i class="fa-solid fa-note-sticky"></i>
                    <span>Οι Σημειώσεις μου</span>
                </div>
                <div class="nav-tab @(IsCurrentPage("/upload") ? "active" : "")" @onclick='() => NavigationManager.NavigateTo("/upload")'>
                    <i class="fa-solid fa-file-arrow-up"></i>
                    <span>Ανέβασε Σημειώσεις</span>
                </div>
                <div class="nav-tab @(IsCurrentPage("/report") ? "active" : "")" @onclick='() => NavigationManager.NavigateTo("/report")'>
                    <i class="fa-solid fa-flag"></i>
                    <span>Αναφορά</span>
                </div>
                <div class="nav-tab @(IsCurrentPage("/settings") ? "active" : "")" @onclick='() => NavigationManager.NavigateTo("/settings")'>
                    <i class="fa-solid fa-gear"></i>
                    <span>Ρυθμίσεις</span>
                </div>
                @if (user?.IsAdmin == true)
                {
                    <div class="nav-tab @(IsCurrentPage("/admin") ? "active" : "")" @onclick='() => NavigationManager.NavigateTo("/admin")'>
                        <i style="color: cornflowerblue;" class="fa-solid fa-user-tie"></i>
                        <span style="color: cornflowerblue;">Admin Panel</span>
                    </div>
                }
                @if (user?.IsSecretary == true)
                {
                    <div class="nav-tab @(IsCurrentPage("/secretary") ? "active" : "")" @onclick='() => NavigationManager.NavigateTo("/secretary")'>
                        <i style="color: yellow" class="fa-solid fa-envelope"></i>
                        <span style="color: yellow">Γραμματεία</span>
                    </div>
                }
                <div class="user-profile">
                    <button class="user-name-button" @onclick='() => NavigationManager.NavigateTo($"/profile/{user?.Username}")'>
                        @((user?.FirstName ?? "") + " " + (user?.LastName ?? ""))
                    </button>
                    <div class="user-icon" @onclick="HandleLogout">
                        <i class="fa-solid fa-right-from-bracket"></i>
                    </div>
                </div>
            </div>

            <div class="full-page-background">
                <!-- Περιέχον στοιχείο για τις ρυθμίσεις χρήστη -->
                <div class="settings-container">
                    <h1 class="settings-logo">Ρυθμίσεις Λογαριασμού</h1>

                    <!-- Εμφάνιση μηνυμάτων επιτυχίας ή σφάλματος -->
                    @if (!string.IsNullOrEmpty(successMessage))
                    {
                        <div class="message-container">
                            <div class="success-message">@((MarkupString)successMessage)</div>
                        </div>
                    }
                    @if (!string.IsNullOrEmpty(errorMessage))
                    {
                        <div class="message-container">
                            <div class="error-message">@((MarkupString)errorMessage)</div>
                        </div>
                    }

                    <!-- Ένδειξη φόρτωσης δεδομένων χρήστη -->
                    @if (isLoading)
                    {
                        <div class="spinner-container">
                            <div class="spinner"></div>
                            <p style="color: #333;">Loading user data...</p>
                        </div>
                    }
                    else if (user == null)
                    {
                        <div class="error-message">Failed to load user data. Please try refreshing the page.</div>
                    }
                    else
                    {
                        <!-- Κουμπιά επιλογής καρτέλας ρυθμίσεων -->
                        <div class="settings-tab-buttons">
                            <button class="action-button @(activeTab == "profile" ? "active" : "")" @onclick='() => SetActiveTab("profile")'>
                                <i class="fa-solid fa-user"></i> Προφιλ
                            </button>
                            <button class="action-button @(activeTab == "password" ? "active" : "")" @onclick='() => SetActiveTab("password")'>
                                <i class="fa-solid fa-lock"></i>  Αλλαγη Κωδικου Προσβασης
                            </button>
                            <button class="action-button danger @(activeTab == "delete" ? "active" : "")" @onclick='() => SetActiveTab("delete")'>
                                <i class="fa-solid fa-trash"></i> Διαγραφη Λογαριασμου
                            </button>
                        </div>

                        <!-- Περιεχόμενο ενεργής καρτέλας -->
                        <div class="tab-content">
                            @if (activeTab == "profile")
                            {
                                <!-- Καρτέλα επεξεργασίας προφίλ -->
                                <div class="profile-section">
                                    <div class="form-group">
                                        <label for="username">Username</label>
                                        <input type="text" id="username" class="form-control" @bind="updatedUser.Username" @oninput="CheckUsername" />
                                        @if (!string.IsNullOrEmpty(usernameMessage))
                                        {
                                            <small class="@usernameMessageClass">@usernameMessage</small>
                                        }
                                    </div>
                                    <div class="form-group">
                                        <label for="firstName">Όνομα</label>
                                        <input type="text" id="firstName" class="form-control" @bind="updatedUser.FirstName" />
                                    </div>
                                    <div class="form-group">
                                        <label for="lastName">Επώνυμο</label>
                                        <input type="text" id="lastName" class="form-control" @bind="updatedUser.LastName" />
                                    </div>
                                    <div class="form-group">
                                        <label for="email">Email</label>
                                        <input type="email" id="email" class="form-control" @bind="updatedUser.Email" readonly />
                                        <small class="text-muted">Email cannot be changed</small>
                                    </div>
                                    <div class="form-group">
                                        <label for="uniIdNumber">Αριθμός Ακαδημαϊκού Πάσου</label>
                                        <input type="text" id="uniIdNumber" class="form-control" @bind="updatedUser.UniIdNumber" />
                                    </div>
                                    <div class="form-group mt-4">
                                        <button class="action-button w-100" @onclick="UpdateProfile">
                                            <i class="fa-solid fa-save"></i> Αποθηκευση Αλλαγων
                                        </button>
                                    </div>
                                </div>
                            }
                            else if (activeTab == "password")
                            {
                                <!-- Καρτέλα αλλαγής κωδικού πρόσβασης -->
                                <div class="password-section">
                                    <div class="form-group">
                                        <label for="currentPassword">Τρέχον κωδικός πρόσβασης</label>
                                        <input type="password" id="currentPassword" class="form-control" @bind="currentPassword" />
                                    </div>
                                    <div class="form-group">
                                        <label for="newPassword">Νέος κωδικός πρόσβασης</label>
                                        <input type="password" id="newPassword" class="form-control" @bind="newPassword" />
                                    </div>
                                    <div class="form-group">
                                        <label for="confirmPassword">Επιβεβαίωση νέου κωδικού πρόσβασης</label>
                                        <input type="password" id="confirmPassword" class="form-control" @bind="confirmPassword" />
                                    </div>
                                    <div class="form-group mt-4">
                                        <button class="action-button w-100" @onclick="ChangePassword">
                                            <i class="fa-solid fa-key"></i> Επιβεβαιωση
                                        </button>
                                    </div>
                                </div>
                            }
                            else if (activeTab == "delete")
                            {
                                <!-- Καρτέλα διαγραφής λογαριασμού -->
                                <div class="delete-account-section">
                                    <div class="warning-box">
                                        <i class="fa-solid fa-triangle-exclamation warning-icon"></i><h3><strong>ΠΡΟΣΟΧΗ</strong></h3>
                                        <p>Η διαγραφή του λογαριασμού σας θα διαγράψει οριστικά όλα τα δεδομένα σας, συμπεριλαμβανομένων όλων των σημειώσεων και των αρχείων σας. Αυτή η ενέργεια είναι μη αναστρέψιμη.</p>
                                    </div>
                                    
                                    <div class="form-group">    
                                        <label for="deletePassword">Βάλτε τον κωδικό πρόσβασης για επιβεβαίωση</label>
                                        <input type="password" id="deletePassword" class="form-control" @bind="deletePassword" />
                                    </div>
                                    
                                    <div class="form-check mt-3">
                                        <input type="checkbox" id="confirmDelete" class="form-check-input" @bind="confirmDelete" />
                                        <label class="form-check-label" for="confirmDelete">
                                            Επιβεβαιώνω ότι θέλω να διαγράψω τον λογαριασμό μου και όλα τα συσχετισμένα δεδομένα
                                        </label>
                                    </div>
                                    
                                    <div class="form-group mt-4">
                                        <button class="action-button danger w-100" @onclick="DeleteAccount" disabled="@(!confirmDelete)">
                                            <i class="fa-solid fa-trash"></i> Διαγραφη Λογαριασμου
                                        </button>
                                    </div>
                                </div>
                            }
                        </div>
                    }
                </div>
            </div>
        </Authorized>
        <NotAuthorized>
        </NotAuthorized>
    </AuthorizeView>
</CascadingAuthenticationState>

@code {
    // Βασικές μεταβλητές χρήστη και κατάστασης σελίδας
    private User? user;           
    private User updatedUser = new User();     
    private bool isUserMenuOpen = false;       
    private string? userId;                    
    private string activeTab = "profile";      
    private bool isLoading = true;             

    // Μεταβλητές για αλλαγή κωδικού πρόσβασης
    private string currentPassword = "";       
    private string newPassword = "";           
    private string confirmPassword = "";       
    
    // Μεταβλητές για διαγραφή λογαριασμού
    private string deletePassword = "";        
    private bool confirmDelete = false;        
    private bool deleteInProgress = false;     

    // Μηνύματα και ειδοποιήσεις
    private string errorMessage = "";          
    private string successMessage = "";        
    private string usernameMessage = "";       
    private string usernameMessageClass = "text-muted";  

    // Αρχικοποίηση σελίδας και φόρτωση δεδομένων χρήστη
    protected override async Task OnInitializedAsync()
    {
        try
        {
            // Ανάκτηση της τρέχουσας κατάστασης αυθεντικοποίησης
            var authState = await AuthStateProvider.GetAuthenticationStateAsync();
            var userClaims = authState.User;

            // Έλεγχος αν ο χρήστης είναι συνδεδεμένος
            if (userClaims.Identity?.IsAuthenticated == true)
            {
                // Ανάκτηση του αναγνωριστικού χρήστη από τα claims
                userId = userClaims.FindFirst(ClaimTypes.NameIdentifier)?.Value;
                
                if (!string.IsNullOrEmpty(userId))
                {
                    // Φόρτωση πλήρους προφίλ χρήστη από τη βάση δεδομένων
                    user = await UserService.GetUserByIdAsync(userId);
                    
                    if (user != null)
                    {
                        // Δημιουργία αντιγράφου του χρήστη για επεξεργασία
                        updatedUser = new User
                        {
                            Id = user.Id,
                            Username = user.Username,
                            FirstName = user.FirstName,
                            LastName = user.LastName,
                            Email = user.Email,
                            UniIdNumber = user.UniIdNumber,
                            PasswordHash = user.PasswordHash, // Διατήρηση του ίδιου hash
                            CreatedAt = user.CreatedAt,
                            IsAdmin = user.IsAdmin,
                            NoteIds = new List<string>(user.NoteIds ?? new List<string>())
                        };
                    }
                    else
                    {
                        errorMessage = "Could not find user data.";
                    }
                }
                else
                {
                    errorMessage = "User ID not found in claims.";
                }
            }
            else
            {
                // Ανακατεύθυνση στην αρχική σελίδα αν ο χρήστης δεν είναι συνδεδεμένος
                NavigationManager.NavigateTo("/");
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error initializing page: {ex.Message}";
        }
        finally
        {
            // Ολοκλήρωση φόρτωσης και ανανέωση της διεπαφής
            isLoading = false;
            StateHasChanged();
        }
    }

    // Αλλαγή ενεργής καρτέλας ρυθμίσεων
    private void SetActiveTab(string tab)
    {
        activeTab = tab;
        
        // Καθαρισμός μηνυμάτων κατά την εναλλαγή καρτελών
        errorMessage = "";
        successMessage = "";
        usernameMessage = "";
        
        // Καθαρισμός πεδίων όταν μεταβαίνουμε στην καρτέλα διαγραφής
        if (tab == "delete")
        {
            deletePassword = "";
            confirmDelete = false;
        }
    }

    // Έλεγχος αν βρισκόμαστε στην τρέχουσα σελίδα
    private bool IsCurrentPage(string path)
    {
        return NavigationManager.Uri.EndsWith(path, StringComparison.OrdinalIgnoreCase);
    }

    // Εναλλαγή εμφάνισης μενού χρήστη
    private void ToggleUserMenu()
    {
        isUserMenuOpen = !isUserMenuOpen;
    }

    // Διαχείριση αποσύνδεσης χρήστη
    private async Task HandleLogout()
    {
        if (AuthStateProvider is BlazorAuthStateProvider authProvider)
        {
            await authProvider.UpdateAuthenticationState(null);
            NavigationManager.NavigateTo("/");
        }
    }

    // Έλεγχος διαθεσιμότητας ονόματος χρήστη κατά την πληκτρολόγηση
    private async Task CheckUsername(ChangeEventArgs e)
    {
        // Ανάκτηση νέας τιμής από το πεδίο εισαγωγής
        string newUsername = e.Value?.ToString() ?? "";
        updatedUser.Username = newUsername;

        // Έλεγχος αν το όνομα χρήστη είναι κενό
        if (string.IsNullOrWhiteSpace(newUsername))
        {
            usernameMessage = "Username cannot be empty";
            usernameMessageClass = "text-danger";
            return;
        }

        // Έλεγχος αν το όνομα χρήστη δεν έχει αλλάξει
        if (newUsername == user?.Username)
        {
            usernameMessage = "This is your current username";
            usernameMessageClass = "text-muted";
            return;
        }

        // Έλεγχος αν το όνομα χρήστη υπάρχει στη βάση δεδομένων
        var existingUser = await UserService.GetByUsernameAsync(newUsername);
        if (existingUser != null && existingUser.Id != user?.Id)
        {
            usernameMessage = "Username is already taken";
            usernameMessageClass = "text-danger";
        }
        else
        {
            usernameMessage = "Username is available";
            usernameMessageClass = "text-success";
        }
    }

    // Ενημέρωση προφίλ χρήστη
    private async Task UpdateProfile()
    {
        // Καθαρισμός προηγούμενων μηνυμάτων
        errorMessage = "";
        successMessage = "";

        // Βασική επικύρωση στοιχείων
        if (string.IsNullOrWhiteSpace(updatedUser.Username))
        {
            errorMessage = "Username cannot be empty.";
            return;
        }

        // Έλεγχος αν το όνομα χρήστη δεν έχει αλλάξει
        if (user?.Username == updatedUser.Username)
        {
            // Το όνομα χρήστη παραμένει αμετάβλητο, συνέχεια με άλλα πεδία
        }
        else
        {
            // Έλεγχος αν το νέο όνομα χρήστη υπάρχει ήδη
            var existingUser = await UserService.GetByUsernameAsync(updatedUser.Username);
            if (existingUser != null && existingUser.Id != user?.Id)
            {
                errorMessage = "Το όνομα χρήστη υπάρχει ήδη. Επιλέξτε άλλο.";
                return;
            }
        }

        // Έλεγχος για κενά πεδία ονόματος
        if (string.IsNullOrWhiteSpace(updatedUser.FirstName) || string.IsNullOrWhiteSpace(updatedUser.LastName))
        {
            errorMessage = "Το όνομα και το επώνυμο δεν μπορεί να είναι κενό.";
            return;
        }

        try
        {
            // Αποστολή ενημερωμένων στοιχείων στη βάση δεδομένων
            bool updated = await UserService.UpdateUserAsync(updatedUser);
            
            if (updated)
            {
                // Ενημέρωση τοπικού αντικειμένου χρήστη
                user = updatedUser;
                successMessage = "Το προφίλ ενημερώθηκε με επιτυχία!";
            }
            else
            {
                errorMessage = "Η ενημέρωση του προφίλ απέτυχε. Δοκιμάστε ξανά.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"An error occurred: {ex.Message}";
        }
    }

    // Αλλαγή κωδικού πρόσβασης χρήστη
    private async Task ChangePassword()
    {
        // Καθαρισμός προηγούμενων μηνυμάτων
        errorMessage = "";
        successMessage = "";

        // Επικύρωση εισόδου
        if (string.IsNullOrWhiteSpace(currentPassword))
        {
            errorMessage = "Απαιτείται ο τρέχων κωδικός πρόσβασης.";
            return;
        }

        // Έλεγχος αν ο νέος κωδικός είναι αποδεκτός
        if (string.IsNullOrWhiteSpace(newPassword) || newPassword.Length < 6)
        {
            errorMessage = "Ο νέος κωδικός πρόσβασης πρέπει να αποτελείται από τουλάχιστον 6 χαρακτήρες.";
            return;
        }

        // Έλεγχος αν οι κωδικοί ταιριάζουν
        if (newPassword != confirmPassword)
        {
            errorMessage = "Οι νέοι κωδικοί πρόσβασης δεν ταιριάζουν.";
            return;
        }

        try
        {
            // Επαλήθευση τρέχοντος κωδικού πρόσβασης
            var validUser = await UserService.ValidateUserAsync(user!.Email, currentPassword);
            if (validUser == null)
            {
                errorMessage = "Ο τρέχων κωδικός πρόσβασης είναι λανθασμένος.";
                return;
            }

            // Αλλαγή κωδικού πρόσβασης
            bool updated = await UserService.ChangePasswordAsync(userId!, newPassword);
            
            if (updated)
            {
                // Καθαρισμός πεδίων κωδικού πρόσβασης
                currentPassword = "";
                newPassword = "";
                confirmPassword = "";
                
                successMessage = "Ο κωδικός άλλαξε με επιτυχία!";
            }
            else
            {
                errorMessage = "Αποτυχία αλλαγής κωδικού πρόσβασης. Δοκιμάστε ξανά.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"An error occurred: {ex.Message}";
        }
    }
    
    // Διαγραφή λογαριασμού χρήστη
    private async Task DeleteAccount()
    {
        // Καθαρισμός προηγούμενων μηνυμάτων
        errorMessage = "";
        successMessage = "";
        
        // Έλεγχος αν η διαγραφή έχει επιβεβαιωθεί με το πλαίσιο επιλογής
        if (!confirmDelete)
        {
            errorMessage = "Πρέπει να επιβεβαιώσετε τη διαγραφή λογαριασμού επιλέγοντας το πλαίσιο επιβεβαίωσης.";
            return;
        }
        
        // Έλεγχος αν έχει εισαχθεί ο κωδικός πρόσβασης
        if (string.IsNullOrWhiteSpace(deletePassword))
        {
            errorMessage = "Πρέπει να εισαγάγετε τον κωδικό πρόσβασής σας για να διαγράψετε τον λογαριασμό σας.";
            return;
        }
        
        try
        {
            // Βεβαίωση ότι δεν επεξεργαζόμαστε ήδη μια διαγραφή
            if (deleteInProgress)
                return;
                
            deleteInProgress = true;
            
            // Διπλή επιβεβαίωση με διάλογο JavaScript
            bool confirmResult = await JSRuntime.InvokeAsync<bool>(
                "confirm", "ΠΡΟΣΟΧΗ: Αυτή η ενέργεια θα διαγράψει οριστικά τον λογαριασμό σας και όλα τα δεδομένα σας. Αυτή η ενέργεια δεν μπορεί να αναιρεθεί. Είστε απολύτως σίγουρος;"
            );
            
            // Αν ο χρήστης ακύρωσε τη διαγραφή μέσω του διαλόγου επιβεβαίωσης
            if (!confirmResult)
            {
                deleteInProgress = false;
                return;
            }
            
            // Επαλήθευση του κωδικού πρόσβασης
            var validUser = await UserService.ValidateUserAsync(user!.Email, deletePassword);
            if (validUser == null)
            {
                errorMessage = "Ο κωδικός πρόσβασης είναι λανθασμένος. Η διαγραφή λογαριασμού ακυρώθηκε.";
                deleteInProgress = false;
                return;
            }
            
            // Διαγραφή του λογαριασμού χρήστη
            bool deleted = await UserService.DeleteUserAsync(userId!);
            
            if (deleted)
            {
                // Επιτυχής διαγραφή, αποσύνδεση του χρήστη
                if (AuthStateProvider is BlazorAuthStateProvider authProvider)
                {
                    await authProvider.UpdateAuthenticationState(null);
                    
                    // Εμφάνιση τελικού μηνύματος με Javascript και ανακατεύθυνση
                    await JSRuntime.InvokeVoidAsync("alert", "Ο λογαριασμός σας διαγράφηκε επιτυχώς.");
                    NavigationManager.NavigateTo("/", forceLoad: true);
                }
            }
            else
            {
                errorMessage = "Αποτυχία διαγραφής λογαριασμού. Δοκιμάστε ξανά.";
                deleteInProgress = false;
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"An error occurred: {ex.Message}";
            deleteInProgress = false;
        }
    }
}