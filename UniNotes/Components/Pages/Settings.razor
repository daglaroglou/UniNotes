@page "/settings"
@inject UniNotes.Services.UserService UserService
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthStateProvider
@inject IJSRuntime JSRuntime

<PageTitle>UniNotes - Settings</PageTitle>
<link href="https://fonts.googleapis.com/css2?family=Lobster&display=swap" rel="stylesheet">
<link href="https://fonts.googleapis.com/css2?family=Roboto&display=swap" rel="stylesheet">
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.1/css/all.min.css">

<div id="particles-js"></div>
<script src="js/particles/particles.js"></script>
<script>
    particlesJS.load('particles-js', 'js/particles/particles.json', function () {});
</script>

<CascadingAuthenticationState>
    <AuthorizeView>
        <Authorized>
            <!-- User icon with dropdown menu -->
            <div class="user-icon-container">
                <div class="user-icon" @onclick="ToggleUserMenu">
                    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" width="36" height="36" fill="white">
                        <path d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 3c1.66 0 3 1.34 3 3s-1.34 3-3 3-3-1.34-3-3 1.34-3 3-3zm0 14.2c-2.5 0-4.71-1.28-6-3.22.03-1.99 4-3.08 6-3.08 1.99 0 5.97 1.09 6 3.08-1.29 1.94-3.5 3.22-6 3.22z" />
                    </svg>
                </div>
                @if (isUserMenuOpen)
                {
                    <div class="user-dropdown">
                        <div class="dropdown-item" style="pointer-events: none">
                            <i class="fa-solid fa-user"></i>
                            <span>@((user?.FirstName ?? "") + " " + (user?.LastName ?? ""))</span>
                        </div>
                        <div class="dropdown-divider"></div>
                        <div class="dropdown-item" @onclick='() => NavigationManager.NavigateTo("/MyNotes")'>
                            <i class="fa-solid fa-note-sticky"></i>
                            <span>My Notes</span>
                        </div>
                        <div class="dropdown-item" @onclick='() => NavigationManager.NavigateTo("/upload")'>
                            <i class="fa-solid fa-file-arrow-up"></i>
                            <span>Upload Note</span>
                        </div>
                        <div class="dropdown-item" @onclick='() => NavigationManager.NavigateTo("/dashboard")'>
                            <i class="fa-solid fa-gauge-high"></i>
                            <span>Dashboard</span>
                        </div>
                        <div class="dropdown-divider"></div>
                        <div class="dropdown-item" style="color: red" @onclick="HandleLogout">
                            <i class="fa-solid fa-right-from-bracket"></i>
                            <span>Logout</span>
                        </div>
                    </div>
                }
            </div>

            <div class="full-page-background">
                <div class="settings-container">
                    <h1 class="settings-logo">Account Settings</h1>

                    @if (!string.IsNullOrEmpty(successMessage))
                    {
                        <div class="message-container">
                            <div class="success-message">@((MarkupString)successMessage)</div>
                        </div>
                    }
                    @if (!string.IsNullOrEmpty(errorMessage))
                    {
                        <div class="message-container">
                            <div class="error-message">@((MarkupString)errorMessage)</div>
                        </div>
                    }

                    @if (isLoading)
                    {
                        <div class="spinner-container">
                            <div class="spinner"></div>
                            <p style="color: #333;">Loading user data...</p>
                        </div>
                    }
                    else if (user == null)
                    {
                        <div class="error-message">Failed to load user data. Please try refreshing the page.</div>
                    }
                    else
                    {
                        <!-- Replace tabs with buttons -->
                        <div class="settings-tab-buttons">
                            <button class="action-button @(activeTab == "profile" ? "active" : "")" @onclick='() => SetActiveTab("profile")'>
                                <i class="fa-solid fa-user"></i> Profile
                            </button>
                            <button class="action-button @(activeTab == "password" ? "active" : "")" @onclick='() => SetActiveTab("password")'>
                                <i class="fa-solid fa-lock"></i> Change Password
                            </button>
                            <button class="action-button danger @(activeTab == "delete" ? "active" : "")" @onclick='() => SetActiveTab("delete")'>
                                <i class="fa-solid fa-trash"></i> Delete Account
                            </button>
                        </div>

                        <div class="tab-content">
                            @if (activeTab == "profile")
                            {
                                <div class="profile-section">
                                    <div class="form-group">
                                        <label for="username">Username</label>
                                        <input type="text" id="username" class="form-control" @bind="updatedUser.Username" @oninput="CheckUsername" />
                                        @if (!string.IsNullOrEmpty(usernameMessage))
                                        {
                                            <small class="@usernameMessageClass">@usernameMessage</small>
                                        }
                                    </div>
                                    <div class="form-group">
                                        <label for="firstName">First Name</label>
                                        <input type="text" id="firstName" class="form-control" @bind="updatedUser.FirstName" />
                                    </div>
                                    <div class="form-group">
                                        <label for="lastName">Last Name</label>
                                        <input type="text" id="lastName" class="form-control" @bind="updatedUser.LastName" />
                                    </div>
                                    <div class="form-group">
                                        <label for="email">Email</label>
                                        <input type="email" id="email" class="form-control" @bind="updatedUser.Email" readonly />
                                        <small class="text-muted">Email cannot be changed</small>
                                    </div>
                                    <div class="form-group">
                                        <label for="uniIdNumber">University ID</label>
                                        <input type="text" id="uniIdNumber" class="form-control" @bind="updatedUser.UniIdNumber" />
                                    </div>
                                    <div class="form-group mt-4">
                                        <button class="action-button w-100" @onclick="UpdateProfile">
                                            <i class="fa-solid fa-save"></i> Save Changes
                                        </button>
                                    </div>
                                </div>
                            }
                            else if (activeTab == "password")
                            {
                                <div class="password-section">
                                    <div class="form-group">
                                        <label for="currentPassword">Current Password</label>
                                        <input type="password" id="currentPassword" class="form-control" @bind="currentPassword" />
                                    </div>
                                    <div class="form-group">
                                        <label for="newPassword">New Password</label>
                                        <input type="password" id="newPassword" class="form-control" @bind="newPassword" />
                                    </div>
                                    <div class="form-group">
                                        <label for="confirmPassword">Confirm New Password</label>
                                        <input type="password" id="confirmPassword" class="form-control" @bind="confirmPassword" />
                                    </div>
                                    <div class="form-group mt-4">
                                        <button class="action-button w-100" @onclick="ChangePassword">
                                            <i class="fa-solid fa-key"></i> Change Password
                                        </button>
                                    </div>
                                </div>
                            }
                            else if (activeTab == "delete")
                            {
                                <div class="delete-account-section">
                                    <div class="warning-box">
                                        <i class="fa-solid fa-triangle-exclamation warning-icon"></i><h3>ΠΡΟΣΟΧΗ</h3>
                                        <p>Η διαγραφή του λογαριασμού σας θα διαγράψει οριστικά όλα τα δεδομένα σας, συμπεριλαμβανομένων όλων των σημειώσεων και των αρχείων σας. Αυτή η ενέργεια είναι μη αναστρέψιμη.</p>
                                    </div>
                                    
                                    <div class="form-group">
                                        <label for="deletePassword">Enter your password to confirm</label>
                                        <input type="password" id="deletePassword" class="form-control" @bind="deletePassword" />
                                    </div>
                                    
                                    <div class="form-check mt-3">
                                        <input type="checkbox" id="confirmDelete" class="form-check-input" @bind="confirmDelete" />
                                        <label class="form-check-label" for="confirmDelete">
                                            I confirm that I want to delete my account and all associated data
                                        </label>
                                    </div>
                                    
                                    <div class="form-group mt-4">
                                        <button class="action-button danger w-100" @onclick="DeleteAccount" disabled="@(!confirmDelete)">
                                            <i class="fa-solid fa-trash"></i> Delete Account
                                        </button>
                                    </div>
                                </div>
                            }
                        </div>
                    }
                </div>
            </div>
        </Authorized>
        <NotAuthorized>
            @{
                NavigationManager.NavigateTo("/");
            }
        </NotAuthorized>
    </AuthorizeView>
</CascadingAuthenticationState>

@code {
    private User? user;
    private User updatedUser = new User();
    private bool isUserMenuOpen = false;
    private string? userId;
    private string activeTab = "profile";
    private bool isLoading = true;

    // Password change fields
    private string currentPassword = "";
    private string newPassword = "";
    private string confirmPassword = "";
    
    // Delete account fields
    private string deletePassword = "";
    private bool confirmDelete = false;
    private bool deleteInProgress = false;

    // Messages
    private string errorMessage = "";
    private string successMessage = "";
    private string usernameMessage = "";
    private string usernameMessageClass = "text-muted";

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var authState = await AuthStateProvider.GetAuthenticationStateAsync();
            var userClaims = authState.User;

            if (userClaims.Identity?.IsAuthenticated == true)
            {
                userId = userClaims.FindFirst(ClaimTypes.NameIdentifier)?.Value;
                
                if (!string.IsNullOrEmpty(userId))
                {
                    user = await UserService.GetUserByIdAsync(userId);
                    
                    if (user != null)
                    {
                        // Create a copy of the user for editing
                        updatedUser = new User
                        {
                            Id = user.Id,
                            Username = user.Username,
                            FirstName = user.FirstName,
                            LastName = user.LastName,
                            Email = user.Email,
                            UniIdNumber = user.UniIdNumber,
                            PasswordHash = user.PasswordHash, // Keep the same hash
                            CreatedAt = user.CreatedAt,
                            IsAdmin = user.IsAdmin,
                            NoteIds = new List<string>(user.NoteIds ?? new List<string>())
                        };
                    }
                    else
                    {
                        errorMessage = "Could not find user data.";
                    }
                }
                else
                {
                    errorMessage = "User ID not found in claims.";
                }
            }
            else
            {
                NavigationManager.NavigateTo("/");
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error initializing page: {ex.Message}";
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private void SetActiveTab(string tab)
    {
        activeTab = tab;
        
        // Clear messages when switching tabs
        errorMessage = "";
        successMessage = "";
        usernameMessage = "";
        
        // Clear fields when switching to delete tab
        if (tab == "delete")
        {
            deletePassword = "";
            confirmDelete = false;
        }
    }

    private void ToggleUserMenu()
    {
        isUserMenuOpen = !isUserMenuOpen;
    }

    private async Task HandleLogout()
    {
        if (AuthStateProvider is BlazorAuthStateProvider authProvider)
        {
            await authProvider.UpdateAuthenticationState(null);
            NavigationManager.NavigateTo("/");
        }
    }

    // Check username as the user types
    private async Task CheckUsername(ChangeEventArgs e)
    {
        string newUsername = e.Value?.ToString() ?? "";
        updatedUser.Username = newUsername;

        if (string.IsNullOrWhiteSpace(newUsername))
        {
            usernameMessage = "Username cannot be empty";
            usernameMessageClass = "text-danger";
            return;
        }

        if (newUsername == user?.Username)
        {
            usernameMessage = "This is your current username";
            usernameMessageClass = "text-muted";
            return;
        }

        // Check if username exists in database
        var existingUser = await UserService.GetByUsernameAsync(newUsername);
        if (existingUser != null && existingUser.Id != user?.Id)
        {
            usernameMessage = "Username is already taken";
            usernameMessageClass = "text-danger";
        }
        else
        {
            usernameMessage = "Username is available";
            usernameMessageClass = "text-success";
        }
    }

    private async Task UpdateProfile()
    {
        errorMessage = "";
        successMessage = "";

        // Basic validation
        if (string.IsNullOrWhiteSpace(updatedUser.Username))
        {
            errorMessage = "Username cannot be empty.";
            return;
        }

        // Check if username hasn't changed
        if (user?.Username == updatedUser.Username)
        {
            // Username unchanged, continue with other fields
        }
        else
        {
            // Check if username is taken
            var existingUser = await UserService.GetByUsernameAsync(updatedUser.Username);
            if (existingUser != null && existingUser.Id != user?.Id)
            {
                errorMessage = "Το όνομα χρήστη υπάρχει ήδη. Επιλέξτε άλλο.";
                return;
            }
        }

        if (string.IsNullOrWhiteSpace(updatedUser.FirstName) || string.IsNullOrWhiteSpace(updatedUser.LastName))
        {
            errorMessage = "Το όνομα και το επώνυμο δεν μπορεί να είναι κενό.";
            return;
        }

        try
        {
            // Update the user profile
            bool updated = await UserService.UpdateUserAsync(updatedUser);
            
            if (updated)
            {
                user = updatedUser; // Update the local user object
                successMessage = "Το προφίλ ενημερώθηκε με επιτυχία!";
            }
            else
            {
                errorMessage = "Η ενημέρωση του προφίλ απέτυχε. Δοκιμάστε ξανά.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"An error occurred: {ex.Message}";
        }
    }

    private async Task ChangePassword()
    {
        errorMessage = "";
        successMessage = "";

        // Validation
        if (string.IsNullOrWhiteSpace(currentPassword))
        {
            errorMessage = "Απαιτείται ο τρέχων κωδικός πρόσβασης.";
            return;
        }

        if (string.IsNullOrWhiteSpace(newPassword) || newPassword.Length < 6)
        {
            errorMessage = "Ο νέος κωδικός πρόσβασης πρέπει να αποτελείται από τουλάχιστον 6 χαρακτήρες.";
            return;
        }

        if (newPassword != confirmPassword)
        {
            errorMessage = "Οι νέοι κωδικοί πρόσβασης δεν ταιριάζουν.";
            return;
        }

        try
        {
            // Verify current password
            var validUser = await UserService.ValidateUserAsync(user!.Email, currentPassword);
            if (validUser == null)
            {
                errorMessage = "Ο τρέχων κωδικός πρόσβασης είναι λανθασμένος.";
                return;
            }

            // Change the user password
            bool updated = await UserService.ChangePasswordAsync(userId!, newPassword);
            
            if (updated)
            {
                // Clear password fields
                currentPassword = "";
                newPassword = "";
                confirmPassword = "";
                
                successMessage = "Ο κωδικός άλλαξε με επιτυχία!";
            }
            else
            {
                errorMessage = "Αποτυχία αλλαγής κωδικού πρόσβασης. Δοκιμάστε ξανά.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"An error occurred: {ex.Message}";
        }
    }
    
    private async Task DeleteAccount()
    {
        errorMessage = "";
        successMessage = "";
        
        if (!confirmDelete)
        {
            errorMessage = "Πρέπει να επιβεβαιώσετε τη διαγραφή λογαριασμού επιλέγοντας το πλαίσιο επιβεβαίωσης.";
            return;
        }
        
        if (string.IsNullOrWhiteSpace(deletePassword))
        {
            errorMessage = "Πρέπει να εισαγάγετε τον κωδικό πρόσβασής σας για να διαγράψετε τον λογαριασμό σας.";
            return;
        }
        
        try
        {
            // Make sure we're not already processing a delete
            if (deleteInProgress)
                return;
                
            deleteInProgress = true;
            
            // Double-confirm with a JavaScript dialog
            bool confirmResult = await JSRuntime.InvokeAsync<bool>(
                "confirm", "ΠΡΟΣΟΧΗ: Αυτή η ενέργεια θα διαγράψει οριστικά τον λογαριασμό σας και όλα τα δεδομένα σας. Αυτή η ενέργεια δεν μπορεί να αναιρεθεί. Είστε απολύτως σίγουρος;"
            );
            
            if (!confirmResult)
            {
                deleteInProgress = false;
                return;
            }
            
            // Verify the password
            var validUser = await UserService.ValidateUserAsync(user!.Email, deletePassword);
            if (validUser == null)
            {
                errorMessage = "Ο κωδικός πρόσβασης είναι λανθασμένος. Η διαγραφή λογαριασμού ακυρώθηκε.";
                deleteInProgress = false;
                return;
            }
            
            // Delete the user account
            bool deleted = await UserService.DeleteUserAsync(userId!);
            
            if (deleted)
            {
                // Successfully deleted, log the user out
                if (AuthStateProvider is BlazorAuthStateProvider authProvider)
                {
                    await authProvider.UpdateAuthenticationState(null);
                    
                    // Use JS alert to show a final message and then redirect
                    await JSRuntime.InvokeVoidAsync("alert", "Ο λογαριασμός σας διαγράφηκε επιτυχώς.");
                    NavigationManager.NavigateTo("/", forceLoad: true);
                }
            }
            else
            {
                errorMessage = "Αποτυχία διαγραφής λογαριασμού. Δοκιμάστε ξανά.";
                deleteInProgress = false;
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"An error occurred: {ex.Message}";
            deleteInProgress = false;
        }
    }
}
