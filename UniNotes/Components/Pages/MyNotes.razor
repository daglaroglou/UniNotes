@page "/MyNotes"
@inject UniNotes.Services.UserService UserService
@inject UniNotes.Services.NoteService NoteService
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthStateProvider
@inject IJSRuntime JSRuntime

<PageTitle>UniNotes - My Notes</PageTitle>
<link href="https://fonts.googleapis.com/css2?family=Mynerve&display=swap" rel="stylesheet">
<link href="https://fonts.googleapis.com/css2?family=Roboto&display=swap" rel="stylesheet">
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.1/css/all.min.css">
<div id="particles-js"></div>
<script src="js/particles/particles.js"></script>
<script>
    particlesJS.load('particles-js', 'js/particles/particles.json', function () {});
</script>

<CascadingAuthenticationState>
    <AuthorizeView>
        <Authorized>
            <!-- Navigation tabs -->
            <div class="navigation-tabs">
                <div class="nav-tab @(IsCurrentPage("/dashboard") ? "active" : "")" @onclick='() => NavigationManager.NavigateTo("/dashboard")'>
                    <i class="fa-solid fa-gauge-high"></i>
                    <span>Dashboard</span>
                </div>
                <div class="nav-tab @(IsCurrentPage("/notes") ? "active" : "")" @onclick='() => NavigationManager.NavigateTo("/notes")'>
                    <i class="fa-solid fa-note-sticky"></i>
                    <span>Φόρουμ Σημειώσεων</span>
                </div>
                <div class="nav-tab @(IsCurrentPage("/MyNotes") ? "active" : "")" @onclick='() => NavigationManager.NavigateTo("/MyNotes")'>
                    <i class="fa-solid fa-note-sticky"></i>
                    <span>Οι Σημειώσεις μου</span>
                </div>
                <div class="nav-tab @(IsCurrentPage("/upload") ? "active" : "")" @onclick='() => NavigationManager.NavigateTo("/upload")'>
                    <i class="fa-solid fa-file-arrow-up"></i>
                    <span>Ανέβασε Σημειώσεις</span>
                </div>
                <div class="nav-tab @(IsCurrentPage("/settings") ? "active" : "")" @onclick='() => NavigationManager.NavigateTo("/settings")'>
                    <i class="fa-solid fa-gear"></i>
                    <span>Ρυθμίσεις</span>
                </div>
                @if (user?.IsAdmin == true)
                {
                    <div class="nav-tab @(IsCurrentPage("/admin") ? "active": "")" @onclick='() => NavigationManager.NavigateTo("/admin")'>  
                        <i style="color: cornflowerblue;" class="fa-solid fa-user-tie"></i>  
                        <span style="color: cornflowerblue;">Admin Panel</span>  
                    </div>
                }
                <div class="user-profile">
                    <span>@((user?.FirstName ?? "") + " " + (user?.LastName ?? ""))</span>
                    <div class="user-icon" @onclick="Logout">
                        <i class="fa-solid fa-right-from-bracket"></i>
                    </div>
                </div>
            </div>

            <div class="full-page-background">
                <div class="notes-container">
                    <h1 class="logo">Οι σημειώσεις μου</h1>
                    
                    @if (isLoading)
                    {
                        <div class="loading-spinner">
                            <i class="fa-solid fa-spinner fa-spin fa-2x"></i>
                            <p>Φορτώνοντας τις σημειώσεις σου...</p>
                        </div>
                    }
                    else if (userNotes == null || !userNotes.Any())
                    {
                        <div class="empty-state">
                            <i class="fa-solid fa-folder-open fa-3x mb-3"></i>
                            <h3>Χωρίς σημειώσεις</h3>
                            <p>Δεν έχεις ανεβάσει καθόλου σημειώσεις ακόμα. Ξεκίνα ανεβάζοντας μερικές!</p>
                            <button class="action-button mt-3" @onclick='() => NavigationManager.NavigateTo("/upload")'>
                                <i class="fa-solid fa-upload"></i> Αναρτηση Σημειώσεων
                            </button>
                        </div>
                    }
                    else
                    {
                        <div class="action-bar mb-3" style="justify-content: center;">
                            <button class="action-button" @onclick='() => NavigationManager.NavigateTo("/upload")'>
                                <i class="fa-solid fa-upload"></i> Αναρτηση Νεας Σημειωσης
                            </button>
                        </div>
                        
                        <div class="notes-grid">
                            @foreach (var note in userNotes)
                            {
                                <div class="note-card">
                                    <div class="note-header">
                                        <h3 class="note-title">@note.Title</h3>
                                        <span class="note-date">@note.CreatedAt.ToString("MMM dd, yyyy")</span>
                                    </div>
                                    
                                    <div class="note-preview">
                                        @if (IsPdfFile(note))
                                        {
                                            <div class="file-preview pdf-preview">
                                                <i class="fa-solid fa-file-pdf fa-2x"></i>
                                                <span>PDF Αρχείο</span>
                                            </div>
                                        }
                                        else if (IsImageFile(note))
                                        {
                                            <div class="file-preview image-preview">
                                                <img src="@GetImageDataUrl(note)" alt="@note.Title" />
                                            </div>
                                        }
                                        else if (IsWordFile(note))
                                        {
                                            <div class="file-preview word-preview">
                                                <i class="fa-solid fa-file-word fa-2x"></i>
                                                <span>Word Αρχείο</span>
                                            </div>
                                        }
                                    </div>
                                    
                                    <div class="note-body">
                                        <p class="note-description">@(GetDescriptionPreview(note.Description))</p>
                                        <div class="note-metadata">
                                            <span><i class="fa-solid fa-book"></i> @note.Subject</span>
                                            <span><i class="fa-solid fa-graduation-cap"></i> Semester @note.Semester</span>
                                        </div>
                                    </div>
                                    
                                    <div class="note-actions">
                                        <button class="action-button view-button" @onclick="() => ViewNote(note)">
                                            <i class="fa-solid fa-eye"></i> View
                                        </button>
                                        <button class="action-button delete-button" @onclick="() => DeleteNotePrompt(note.Id)">
                                            <i class="fa-solid fa-trash"></i> Delete
                                        </button>
                                    </div>
                                </div>
                            }
                        </div>
                    }
                </div>
            </div>
        </Authorized>
        <NotAuthorized>
            @{
                NavigationManager.NavigateTo("/");
            }
        </NotAuthorized>
    </AuthorizeView>
</CascadingAuthenticationState>

@code {
    private bool isUserMenuOpen = false;
    private User? user;
    private string? userId;
    private List<Note>? userNotes;
    private bool isLoading = true;
    private Dictionary<string, string> imageCache = new Dictionary<string, string>();

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        var userClaims = authState.User;

        if (userClaims.Identity?.IsAuthenticated == true)
        {
            userId = userClaims.FindFirst(ClaimTypes.NameIdentifier)?.Value;
            if (!string.IsNullOrEmpty(userId))
            {
                user = await UserService.GetUserByIdAsync(userId);
                if (user != null)
                {
                    await LoadUserNotes();
                }
            }
        }
        
        isLoading = false;
    }

    private async Task LoadUserNotes()
    {
        if (user != null)
        {
            userNotes = await NoteService.GetNotesByUsernameAsync(user.Username);
            
            // Clear the image cache when loading new notes
            imageCache.Clear();
        }
    }
    
    private async Task Logout()
    {
        if (AuthStateProvider is BlazorAuthStateProvider blazorAuthStateProvider)
        {
            await blazorAuthStateProvider.UpdateAuthenticationState(null);
            NavigationManager.NavigateTo("/");
        }
    }
    
    private string GetDescriptionPreview(string description)
    {
        if (string.IsNullOrEmpty(description))
            return "No description";
            
        return description.Length > 100 ? description[..100] + "..." : description;
    }
    
    private bool IsPdfFile(Note note)
    {
        // Simple check for PDF files - a more robust solution would check MIME types
        if (note.Content == null || note.Content.Length < 5)
            return false;
            
        byte[] pdfSignature = new byte[] { 0x25, 0x50, 0x44, 0x46 }; // %PDF
        return note.Content.Take(4).SequenceEqual(pdfSignature);
    }
    
    private bool IsImageFile(Note note)
    {
        // Very basic image detection - this would ideally be based on MIME types
        if (note.Content == null || note.Content.Length < 10)
            return false;
            
        byte[] jpegSignature = new byte[] { 0xFF, 0xD8, 0xFF };
        byte[] pngSignature = new byte[] { 0x89, 0x50, 0x4E, 0x47 };
        
        return note.Content.Take(3).SequenceEqual(jpegSignature) || note.Content.Take(4).SequenceEqual(pngSignature);
    }
    
    private bool IsWordFile(Note note)
    {
        // Check if content exists and has minimum length
        if (note.Content == null || note.Content.Length < 10)
            return false;
            
        // Check for binary Office file signature (doc, xls, ppt)
        // D0 CF 11 E0 A1 B1 1A E1 (OLE2 Compound Document)
        byte[] oleSignature = new byte[] { 0xD0, 0xCF, 0x11, 0xE0 };
        
        // Check for Office Open XML formats (docx, xlsx, pptx)
        // They are ZIP files with signature: 50 4B 03 04
        byte[] zipSignature = new byte[] { 0x50, 0x4B, 0x03, 0x04 };
        
        return note.Content.Take(4).SequenceEqual(oleSignature) || 
               note.Content.Take(4).SequenceEqual(zipSignature);
    }
    
    private string GetImageDataUrl(Note note)
    {
        // Check if we've already cached this image
        if (note.Id != null && imageCache.ContainsKey(note.Id))
        {
            return imageCache[note.Id];
        }

        // If the note has no content or ID, return an empty string
        if (note.Id == null || note.Content == null || note.Content.Length == 0)
        {
            return string.Empty;
        }

        string mimeType = "image/jpeg"; // Default to JPEG
        
        // Try to determine the image type from the first few bytes
        if (note.Content.Length > 4)
        {
            byte[] pngSignature = new byte[] { 0x89, 0x50, 0x4E, 0x47 };
            if (note.Content.Take(4).SequenceEqual(pngSignature))
            {
                mimeType = "image/png";
            }
        }

        // Convert the byte array to a Base64 string
        string base64Data = Convert.ToBase64String(note.Content);
        string dataUrl = $"data:{mimeType};base64,{base64Data}";
        
        // Cache the result to avoid recomputing it
        imageCache[note.Id] = dataUrl;
        
        return dataUrl;
    }
    
    private async Task ViewNote(Note note)
    {
        if (note?.Id == null) return;
        
        if (IsImageFile(note))
        {
            // For images, we can display them directly in the browser
            string dataUrl = GetImageDataUrl(note);
            await JSRuntime.InvokeVoidAsync("window.open", dataUrl, "_blank");
        }
        else if (IsPdfFile(note))
        {
            // For PDFs, we'll create a temporary object URL and open it
            string base64Data = Convert.ToBase64String(note.Content ?? Array.Empty<byte>());
            string dataUrl = $"data:application/pdf;base64,{base64Data}";
            await JSRuntime.InvokeVoidAsync("window.open", dataUrl, "_blank");
        }
        else
        {
            // For other files, navigate to a dedicated page
            NavigationManager.NavigateTo($"/note/{note.Id}");
        }
    }
    
    private async Task DeleteNotePrompt(string? noteId)
    {
        if (!string.IsNullOrEmpty(noteId))
        {
            bool confirmed = await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete this note?");
            if (confirmed)
            {
                await DeleteNote(noteId);
            }
        }
    }
    
    private async Task DeleteNote(string noteId)
    {
        bool result = await NoteService.DeleteNoteAsync(noteId);
        if (result)
        {
            // Clear the image from cache if it exists
            if (imageCache.ContainsKey(noteId))
            {
                imageCache.Remove(noteId);
            }
            
            await LoadUserNotes();
            StateHasChanged();
        }
        else
        {
            await JSRuntime.InvokeVoidAsync("alert", "Failed to delete the note. Please try again.");
        }
    }

    private bool IsCurrentPage(string path)
    {
        return NavigationManager.Uri.EndsWith(path, StringComparison.OrdinalIgnoreCase);
    }
}