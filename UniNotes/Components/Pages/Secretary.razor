@page "/secretary"
@inject UniNotes.Services.UserService UserService
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthStateProvider
@inject IJSRuntime JSRuntime
@inject IConfiguration Configuration

<PageTitle>UniNotes - Secretary</PageTitle>
<link href="https://fonts.googleapis.com/css2?family=Mynerve&display=swap" rel="stylesheet">
<link href="https://fonts.googleapis.com/css2?family=Roboto&display=swap" rel="stylesheet">
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.1/css/all.min.css">

<!-- Περιοχή για το animation σωματιδίων -->
<div id="particles-js"></div>
<script src="js/particles/particles.js"></script>
<script>
    particlesJS.load('particles-js', 'js/particles/particles.json', function () {});
</script>

<CascadingAuthenticationState>
    <AuthorizeView>
        <Authorized>
            <!-- Καρτέλες πλοήγησης -->
            <div class="navigation-tabs">
                <div class="nav-tab @(IsCurrentPage("/dashboard") ? "active" : "")" @onclick='() => NavigationManager.NavigateTo("/dashboard")'>
                    <i class="fa-solid fa-gauge-high"></i>
                    <span>Dashboard</span>
                </div>
                <div class="nav-tab @(IsCurrentPage("/notes") ? "active" : "")" @onclick='() => NavigationManager.NavigateTo("/notes")'>
                    <i class="fa-solid fa-note-sticky"></i>
                    <span>Φόρουμ Σημειώσεων</span>
                </div>
                <div class="nav-tab @(IsCurrentPage("/MyNotes") ? "active" : "")" @onclick='() => NavigationManager.NavigateTo("/MyNotes")'>
                    <i class="fa-solid fa-note-sticky"></i>
                    <span>Οι Σημειώσεις μου</span>
                </div>
                <div class="nav-tab @(IsCurrentPage("/upload") ? "active" : "")" @onclick='() => NavigationManager.NavigateTo("/upload")'>
                    <i class="fa-solid fa-file-arrow-up"></i>
                    <span>Ανέβασε Σημειώσεις</span>
                </div>
                <div class="nav-tab @(IsCurrentPage("/report") ? "active" : "")" @onclick='() => NavigationManager.NavigateTo("/report")'>
                    <i class="fa-solid fa-flag"></i>
                    <span>Αναφορά</span>
                </div>
                <div class="nav-tab @(IsCurrentPage("/settings") ? "active" : "")" @onclick='() => NavigationManager.NavigateTo("/settings")'>
                    <i class="fa-solid fa-gear"></i>
                    <span>Ρυθμίσεις</span>
                </div>
                @if (user?.IsAdmin == true)
                {
                    <div class="nav-tab @(IsCurrentPage("/admin") ? "active" : "")" @onclick='() => NavigationManager.NavigateTo("/admin")'>
                        <i style="color: cornflowerblue;" class="fa-solid fa-user-tie"></i>
                        <span style="color: cornflowerblue;">Admin Panel</span>
                    </div>
                }
                @if (user?.IsSecretary == true)
                {
                    <div class="nav-tab @(IsCurrentPage("/secretary") ? "active" : "")" @onclick='() => NavigationManager.NavigateTo("/secretary")'>
                        <i style="color: yellow" class="fa-solid fa-envelope"></i>
                        <span style="color: yellow">Γραμματεία</span>
                    </div>
                }
                <div class="user-profile">
                    <button class="user-name-button" @onclick='() => NavigationManager.NavigateTo($"/profile/{user?.Username}")'>
                        @((user?.FirstName ?? "") + " " + (user?.LastName ?? ""))
                    </button>
                    <div class="user-icon" @onclick="HandleLogout">
                        <i class="fa-solid fa-right-from-bracket"></i>
                    </div>
                </div>
            </div>

            <div class="full-page-background">
                @if (user?.IsSecretary == true)
                {
                    <!-- Φόρμα αιτημάτων γραμματείας - μόνο για εξουσιοδοτημένους χρήστες -->
                    <div class="upload-container">
                        <h1 class="logo">Γραμματεία</h1>

                        <!-- Μηνύματα επιτυχίας ή σφάλματος -->
                        @if (!string.IsNullOrEmpty(successMessage))
                        {
                            <div class="message-container">
                                <div class="success-message">@((MarkupString)successMessage)</div>
                            </div>
                        }
                        @if (!string.IsNullOrEmpty(errorMessage))
                        {
                            <div class="message-container">
                                <div class="error-message">@((MarkupString)errorMessage)</div>
                            </div>
                        }

                        <!-- Πεδία φόρμας αιτήματος γραμματείας -->
                        <div class="form-group">
                            <label for="subject">Θέμα</label>
                            <div class="title-container">
                                <input id="subject" type="text" class="form-control"
                                       @bind="subject"
                                       placeholder=""
                                       @onclick="FocusElement" />
                                <div class="hover-text">Εισάγετε το θέμα του αιτήματος...</div>
                            </div>
                        </div>

                        <div class="form-group">
                            <label for="description">Περιγραφή</label>
                            <div class="description-container">
                                <textarea id="description" class="form-control"
                                          @bind="description"
                                          placeholder=""
                                          rows="5"
                                          @onclick="FocusElement"></textarea>
                                <div class="hover-text">Παρακαλώ περιγράψτε αναλυτικά το αίτημά σας...</div>
                            </div>
                        </div>

                        <div class="form-group mt-4">
                            <button class="action-button w-100" @onclick="() => ValidateAndSubmit()">
                                <i class="fa-solid fa-paper-plane"></i> ΥΠΟΒΟΛΗ ΑΙΤΗΜΑΤΟΣ
                            </button>
                        </div>
                    </div>
                }
                else
                {
                    <!-- Μήνυμα πρόσβασης σε μη εξουσιοδοτημένους χρήστες -->
                    <div class="upload-container">
                        <h1 class="logo">Γραμματεία</h1>
                        <div class="message-container">
                            <div class="error-message">Δεν έχετε δικαίωμα πρόσβασης σε αυτή τη σελίδα.</div>
                        </div>
                    </div>
                }
            </div>
        </Authorized>
        <NotAuthorized>
        </NotAuthorized>
    </AuthorizeView>
</CascadingAuthenticationState>

@code {
    // Βασικές μεταβλητές
    private User? user;
    private bool isLoading = true;
    private string errorMessage = "";
    private string successMessage = "";
    private bool isSubmitting = false;

    // Πεδία φόρμας γραμματείας
    private string subject = "";
    private string description = "";

    // Διεύθυνση webhook του Discord από τη ρύθμιση παραμέτρων
    private string? webhookUrl => Configuration["DiscordWebhook:SecretaryUrl"];
    private readonly HttpClient httpClient = new HttpClient();

    // Αρχικοποίηση και φόρτωση δεδομένων χρήστη
    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        var userClaims = authState.User;

        if (userClaims.Identity?.IsAuthenticated == true)
        {
            var userId = userClaims.FindFirst(ClaimTypes.NameIdentifier)?.Value;
            if (!string.IsNullOrEmpty(userId))
            {
                user = await UserService.GetUserByIdAsync(userId);
            }
        }

        isLoading = false;
    }

    // Έλεγχος αυθεντικοποίησης μετά την απόδοση της σελίδας
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // Ανακατεύθυνση μόνο αν ο χρήστης δεν είναι συνδεδεμένος
            var authState = await AuthStateProvider.GetAuthenticationStateAsync();
            if (!authState.User.Identity?.IsAuthenticated == true)
            {
                await Task.Delay(2000); // Καθυστέρηση 2 δευτερολέπτων
                NavigationManager.NavigateTo("/");
            }
        }
    }

    // Επικύρωση δεδομένων φόρμας και υποβολή
    private async Task ValidateAndSubmit()
    {
        // Αποτροπή πολλαπλών υποβολών
        if (isSubmitting) return;

        // Καθαρισμός προηγούμενων μηνυμάτων
        errorMessage = string.Empty;
        successMessage = string.Empty;

        // Συλλογή σφαλμάτων επικύρωσης
        var errors = new List<string>();

        if (string.IsNullOrWhiteSpace(subject))
        {
            errors.Add("Το θέμα του αιτήματος είναι υποχρεωτικό.");
        }

        if (string.IsNullOrWhiteSpace(description))
        {
            errors.Add("Η περιγραφή είναι υποχρεωτική.");
        }
        else if (description.Length < 10)
        {
            errors.Add("Παρακαλώ δώστε περισσότερες λεπτομέρειες στην περιγραφή (τουλάχιστον 10 χαρακτήρες).");
        }

        // Αν υπάρχουν σφάλματα επικύρωσης, εμφάνισή τους
        if (errors.Count > 0)
        {
            errorMessage = string.Join("<br>", errors);
            return;
        }

        // Αν η επικύρωση είναι επιτυχής, συνέχεια με την υποβολή
        await SubmitSecretaryRequest();
    }

    // Υποβολή αιτήματος γραμματείας στο webhook του Discord
    private async Task SubmitSecretaryRequest()
    {
        isSubmitting = true;
        bool isRedirecting = false;

        try
        {
            // Έλεγχος αν έχει ρυθμιστεί το webhook URL
            if (string.IsNullOrEmpty(webhookUrl))
            {
                errorMessage = "Σφάλμα ρύθμισης: Η διεύθυνση webhook δεν έχει οριστεί.";
                return;
            }

            // Δημιουργία του payload για το webhook του Discord
            var payload = new
            {
                username = $"ΓΡΑΜΜΑΤΕΙΑ",
                avatar_url = $"https://i.pinimg.com/originals/65/cc/8b/65cc8b7b062ceb2601d66a90ce706485.gif",
                content = "@everyone",
                embeds = new[]
                {
                    new
                    {
                        title = "New Secretary Request!",
                        type = "rich",
                        color = 5814783, // Διαφορετικό χρώμα από την Αναφορά
                        fields = new object[]
                        {
                            new { name = "Subject", value = subject, inline = false },
                            new { name = "Description", value = description },
                        },
                        footer = new
                        {
                            text = "UniNotes 2025",
                        },
                        timestamp = DateTime.UtcNow.ToString("o")
                    }
                }
            };

            // Μετατροπή σε JSON
            string jsonPayload = JsonSerializer.Serialize(payload);

            // Αποστολή στο webhook του Discord
            var content = new StringContent(jsonPayload, Encoding.UTF8, "application/json");
            var response = await httpClient.PostAsync(webhookUrl, content);

            if (response.IsSuccessStatusCode)
            {
                // Επαναφορά πεδίων φόρμας
                subject = "";
                description = "";

                // Εμφάνιση μηνύματος επιτυχίας
                successMessage = "Το αίτημά σας υποβλήθηκε με επιτυχία! Θα επικοινωνήσουμε μαζί σας σύντομα. Ανακατεύθυνση στο dashboard...";
                StateHasChanged();

                // Αποτροπή διπλών ανακατευθύνσεων
                isRedirecting = true;

                // Καθυστέρηση για να διασφαλιστεί ότι ο χρήστης βλέπει το μήνυμα επιτυχίας
                await Task.Delay(3000);
                NavigationManager.NavigateTo("/dashboard", forceLoad: false);
            }
            else
            {
                errorMessage = $"Σφάλμα κατά την υποβολή του αιτήματος. Κωδικός: {(int)response.StatusCode}";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Προέκυψε σφάλμα: {ex.Message}";
        }
        finally
        {
            // Επαναφορά της σημαίας isSubmitting μόνο αν δεν γίνεται ανακατεύθυνση
            if (!isRedirecting)
            {
                isSubmitting = false;
            }
        }
    }

    // Εστίαση στο ενεργό στοιχείο της φόρμας
    private async Task FocusElement(MouseEventArgs args)
    {
        // Χρήση JavaScript για λήψη του τρέχοντος εστιασμένου στοιχείου
        var elementId = await JSRuntime.InvokeAsync<string>("eval", "document.activeElement.id");

        if (!string.IsNullOrEmpty(elementId))
        {
            // Εξαναγκασμός εστίασης στο στοιχείο
            await JSRuntime.InvokeVoidAsync("document.getElementById", elementId, "focus");
        }
    }

    // Έλεγχος αν βρισκόμαστε στην τρέχουσα σελίδα
    private bool IsCurrentPage(string path)
    {
        return NavigationManager.Uri.EndsWith(path, StringComparison.OrdinalIgnoreCase);
    }

    // Χειρισμός αποσύνδεσης χρήστη
    private void HandleLogout(MouseEventArgs args)
    {
        throw new NotImplementedException();
    }
}