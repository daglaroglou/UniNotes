@page "/dashboard"
@inject UniNotes.Services.UserService UserService
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthStateProvider

<PageTitle>UniNotes - Dashboard</PageTitle>
<link href="https://fonts.googleapis.com/css2?family=Lobster&display=swap" rel="stylesheet">
<link href="https://fonts.googleapis.com/css2?family=Roboto&display=swap" rel="stylesheet">
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.1/css/all.min.css">
<div id="particles-js"></div>
<script src="js/particles/particles.js"></script>
<script>
    particlesJS.load('particles-js', 'js/particles/particles.json', function () {});
</script>

<CascadingAuthenticationState>
    <AuthorizeView>
        <Authorized>
            <!-- Navigation tabs -->
            <div class="navigation-tabs">
                <div class="nav-tab @(IsCurrentPage("/dashboard") ? "active" : "")" @onclick='() => NavigationManager.NavigateTo("/dashboard")'>
                    <i class="fa-solid fa-gauge-high"></i>
                    <span>Dashboard</span>
                </div>
                <div class="nav-tab @(IsCurrentPage("/notes") ? "active" : "")" @onclick='() => NavigationManager.NavigateTo("/notes")'>
                    <i class="fa-solid fa-note-sticky"></i>
                    <span>Φόρουμ Σημειώσεων</span>
                </div>
                <div class="nav-tab @(IsCurrentPage("/MyNotes") ? "active" : "")" @onclick='() => NavigationManager.NavigateTo("/MyNotes")'>
                    <i class="fa-solid fa-note-sticky"></i>
                    <span>Οι Σημειώσεις μου</span>
                </div>
                <div class="nav-tab @(IsCurrentPage("/upload") ? "active" : "")" @onclick='() => NavigationManager.NavigateTo("/upload")'>
                    <i class="fa-solid fa-file-arrow-up"></i>
                    <span>Ανέβασε Σημειώσεις</span>
                </div>
                <div class="nav-tab @(IsCurrentPage("/report") ? "active" : "")" @onclick='() => NavigationManager.NavigateTo("/report")'>
                    <i class="fa-solid fa-flag"></i>
                    <span>Αναφορά</span>
                </div>
                <div class="nav-tab @(IsCurrentPage("/settings") ? "active" : "")" @onclick='() => NavigationManager.NavigateTo("/settings")'>
                    <i class="fa-solid fa-gear"></i>
                    <span>Ρυθμίσεις</span>
                </div>
                @if (user?.IsAdmin == true)
                {
                    <div class="nav-tab @(IsCurrentPage("/admin") ? "active" : "")" @onclick='() => NavigationManager.NavigateTo("/admin")'>
                        <i style="color: cornflowerblue;" class="fa-solid fa-user-tie"></i>
                        <span style="color: cornflowerblue;">Admin Panel</span>
                    </div>
                }
                <div class="user-profile">
                    <button class="user-name-button" @onclick='() => NavigationManager.NavigateTo($"/profile/{user?.Username}")'>
                        @((user?.FirstName ?? "") + " " + (user?.LastName ?? ""))
                    </button>
                    <div class="user-icon" @onclick="HandleLogout">
                        <i class="fa-solid fa-right-from-bracket"></i>
                    </div>
                </div>
            </div>

            <div class="full-page-background">
                <center>
                    <h1 class="logo">Dashboard</h1>
                    @if (isLoading)
                    {
                        <div class="spinner-container">
                            <div class="spinner"></div>
                        </div>
                    }
                    else if (user != null)
                    {
                        <h3 class="welcome">Να 'μαστε πάλι, <b>@user.Username</b> :3</h3>
                    }
                </center>
            </div>
        </Authorized>
        <NotAuthorized>
        </NotAuthorized>
    </AuthorizeView>
</CascadingAuthenticationState>

@code {
    private User? user;
    private bool isLoading = true;
    private bool isUserMenuOpen = false;
    private bool initialized = false;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && !initialized)
        {
            initialized = true;

            var authState = await AuthStateProvider.GetAuthenticationStateAsync();
            var userClaims = authState.User;

            if (!userClaims.Identity?.IsAuthenticated ?? true)
            {
                NavigationManager.NavigateTo("/login", forceLoad: true);
                return;
            }

            var userId = userClaims.FindFirst(ClaimTypes.NameIdentifier)?.Value;
            if (string.IsNullOrWhiteSpace(userId))
            {
                NavigationManager.NavigateTo("/login", forceLoad: true);
                return;
            }

            user = await UserService.GetUserByIdAsync(userId);

            if (user is null)
            {
                var authProvider = (BlazorAuthStateProvider)AuthStateProvider;
                await authProvider.UpdateAuthenticationState(null);
                NavigationManager.NavigateTo("/login", forceLoad: true);
                return;
            }

            isLoading = false;
            StateHasChanged(); // Force re-render now that data is loaded
        }
    }

    private async Task HandleLogout()
    {
        var authStateProvider = (BlazorAuthStateProvider)AuthStateProvider;
        await authStateProvider.UpdateAuthenticationState(null);
        NavigationManager.NavigateTo("/", forceLoad: true);
    }

    private void RedirectToLogin()
    {
        NavigationManager.NavigateTo("/login");
    }

    private bool IsCurrentPage(string path)
    {
        return NavigationManager.Uri.EndsWith(path, StringComparison.OrdinalIgnoreCase);
    }
}